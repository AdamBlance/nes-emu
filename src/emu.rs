use crate::hw;
use crate::opc;
use std::io;

pub fn emulate(cart: &hw::Cartridge) {
    
    // Create and init hardware

    let mut wram: [u8; 2048] = [0; 2048];

    let mut vram: [u8; 2048] = [0; 2048];

    // let test = concat_u8(read_mem(0xFFFD, &wram, cart), read_mem(0xFFFC, &wram, cart));

    

    let mut cpu = hw::Cpu {
        a: 0, 
        x: 0, 
        y: 0, 
        s: 0xFD, 
        p_n: false,
        p_v: false,
        p_d: false,
        p_i: true,
        p_z: false,
        p_c: false,
        pc: 0xC000,
        cycles: 7, 
    };

    let mut ppu = hw::Ppu {
        ppuctrl: 0,
        ppumask: 0,
        ppustatus: 0,
        oamaddr: 0,
        ppuscroll: 0,
        ppuaddr: 0,
        ppudata: 0,
        oamdata: 0,
        oamdma: 0,

        t: 0,
        v: 0,
        x: 0,
        w: false,
    
        palette_mem: [0; 32],
        oam: [0; 256],

        odd_frame: false,

        cycles: 0,
    };

    let pc_list: [u16; 8991] = [0xC000, 0xC5F5, 0xC5F7, 0xC5F9, 0xC5FB, 0xC5FD, 0xC72D, 0xC72E, 0xC72F, 0xC735, 0xC736, 0xC737, 0xC739, 0xC740, 0xC741, 0xC742, 0xC744, 0xC74B, 0xC74C, 0xC74D, 0xC753, 0xC754, 0xC756, 0xC75C, 0xC75D, 0xC75F, 0xC761, 0xC768, 0xC769, 0xC76B, 0xC771, 0xC772, 0xC774, 0xC776, 0xC77D, 0xC77E, 0xC780, 0xC782, 0xC784, 0xC78A, 0xC78B, 0xC78D, 0xC78F, 0xC796, 0xC797, 0xC799, 0xC79B, 0xC79D, 0xC7A3, 0xC7A4, 0xC7A6, 0xC7A8, 0xC7AF, 0xC7B0, 0xC7B2, 0xC7B8, 0xC7B9, 0xC7BB, 0xC7BD, 0xC7D9, 0xC7DA, 0xC600, 0xC7DB, 0xC7DC, 0xC7DE, 0xC7E0, 0xC7E2, 0xC7E4, 
    0xC7E5, 0xC7E6, 0xC7E7, 0xC7E8, 0xC7E9, 0xC7EB, 0xC7ED, 0xC7F3, 0xC7F4, 0xC7F6, 0xC7F8, 0xC7FA, 0xC7FB, 0xC7FD, 0xC7FE, 0xC7FF, 0xC800, 0xC802, 0xC804, 0xC80A, 0xC80B, 0xC80D, 0xC80F, 0xC811, 0xC812, 0xC814, 0xC815, 0xC816, 0xC817, 0xC819, 0xC81B, 0xC821, 0xC822, 0xC824, 0xC825, 0xC826, 0xC828, 0xC82A, 0xC82C, 0xC82E, 0xC835, 0xC836, 0xC838, 0xC839, 0xC83A, 0xC83C, 0xC83E, 0xC840, 0xC842, 0xC849, 0xC84A, 0xC84B, 0xC84D, 0xC84F, 0xC851, 0xC852, 0xC854, 0xC855, 0xC857, 0xC858, 0xC85A, 0xC85C, 0xC85E, 0xC860, 0xC867, 0xC868, 0xC86A, 0xC86C, 0xC86E, 0xC86F, 0xC871, 0xC872, 0xC874, 0xC875, 0xC877, 0xC879, 0xC87B, 0xC87D, 0xC884, 0xC603, 0xC885, 0xC886, 0xC887, 0xC889, 0xC88B, 0xC88D, 0xC88F, 0xC891, 0xC893, 0xC895, 0xC897, 0xC899, 0xC89B, 0xC8A2, 0xC8A3, 0xC8A4, 0xC8A5, 0xC8A7, 0xC8A9, 0xC8AB, 0xC8AD, 0xC8AF, 0xC8B1, 0xC8B8, 0xC8B9, 0xC8BA, 0xC8BC, 0xC8BE, 0xC8C0, 
    0xC8C2, 0xC8C4, 0xC8C6, 0xC8C8, 0xC8CF, 0xC8D0, 0xC8D1, 0xC8D2, 0xC8D4, 0xC8D6, 0xC8D8, 0xC8DA, 0xC8DC, 0xC8DE, 0xC8E0, 0xC8E7, 0xC8E8, 0xC8E9, 0xC8EB, 0xC8ED, 0xC8EF, 0xC8F1, 0xC8F3, 0xC8F5, 0xC8F7, 0xC8F9, 0xC900, 0xC901, 0xC902, 0xC903, 0xC905, 0xC907, 0xC909, 0xC90B, 0xC90D, 0xC90F, 0xC916, 0xC917, 0xC918, 0xC91A, 0xC91C, 0xC91E, 0xC920, 0xC922, 0xC924, 0xC926, 0xC928, 0xC92F, 0xC930, 0xC931, 0xC932, 0xC934, 0xC936, 0xC938, 0xC93A, 0xC93C, 0xC93E, 0xC940, 0xC942, 0xC949, 0xC94A, 0xC94B, 0xC94C, 0xC94D, 0xC94F, 0xC951, 0xC953, 0xC955, 0xC957, 0xC959, 0xC95B, 0xC962, 0xC963, 0xC964, 0xC966, 0xC968, 0xC96A, 0xC96C, 0xC96E, 0xC970, 0xC972, 0xC974, 0xC97B, 0xC97C, 0xC97D, 0xC97E, 0xC980, 0xC982, 0xC984, 0xC986, 0xC988, 0xC98A, 0xC991, 0xC992, 0xC993, 0xC994, 0xC996, 0xC998, 0xC99A, 0xC99C, 0xC99E, 0xC9A5, 0xC9A6, 0xC9A7, 0xC9A9, 0xC9AB, 0xC9AD, 0xC9AF, 0xC9B1, 
    0xC9B3, 0xC9BA, 0xC9BB, 0xC9BD, 0xC9BF, 0xC9C1, 0xC9C3, 0xC9C5, 0xC9C7, 0xC9C9, 0xC9D0, 0xC9D1, 0xC9D2, 0xC9D4, 0xC9D6, 0xC9D8, 0xC9DA, 0xC9DC, 0xC9E3, 0xC9E4, 0xC9E6, 0xC9E8, 0xC9EA, 0xC9EC, 0xC9F3, 0xC9F4, 0xC9F6, 0xC9F8, 0xC9FA, 0xC9FC, 0xC9FE, 0xCA05, 0xCA06, 0xCA08, 0xCA0A, 0xCA0C, 0xCA0E, 0xCA15, 0xCA16, 0xCA18, 0xCA1A, 0xCA1C, 0xCA1E, 0xCA25, 0xCA26, 0xCA28, 0xCA2A, 0xCA2C, 0xCA2E, 0xCA35, 0xCA36, 0xCA38, 0xCA3A, 0xCA3C, 0xCA3E, 0xCA40, 0xCA42, 0xCA44, 0xCA4B, 0xCA4C, 0xCA4D, 0xCA4F, 0xCA51, 0xCA53, 0xCA55, 0xCA57, 0xCA5E, 0xCA5F, 0xCA61, 0xCA63, 0xCA65, 0xCA67, 0xCA6E, 0xCA6F, 0xCA71, 0xCA73, 0xCA75, 0xCA77, 0xCA79, 0xCA80, 0xCA81, 0xCA83, 0xCA85, 0xCA87, 0xCA89, 0xCA90, 0xCA91, 0xCA93, 0xCA95, 0xCA97, 0xCA99, 0xCAA0, 0xCAA1, 0xCAA3, 0xCAA5, 0xCAA7, 0xCAA9, 0xCAB0, 0xCAB1, 0xCAB3, 0xCAB5, 0xCAB7, 0xCAB9, 0xCABB, 0xCABD, 0xCABF, 0xCAC6, 0xCAC7, 0xCAC8, 
    0xCACA, 0xCACC, 0xCACE, 0xCAD0, 0xCAD2, 0xCAD9, 0xCADA, 0xCADC, 0xCADE, 0xCAE0, 0xCAE2, 0xCAE9, 0xCAEA, 0xCAEC, 0xCAEE, 0xCAF0, 0xCAF2, 0xCAF4, 0xCAFB, 0xCAFC, 0xCAFE, 0xCB00, 0xCB02, 0xCB04, 0xCB0B, 0xCB0C, 0xCB0E, 0xCB10, 0xCB12, 0xCB14, 0xCB1B, 0xCB1C, 0xCB1E, 0xCB20, 0xCB22, 0xCB24, 0xCB2B, 0xCB2C, 0xCB2D, 0xCB2E, 0xCB30, 0xCB32, 0xCB34, 0xCB36, 0xCB38, 0xCB3F, 0xCB40, 0xCB41, 0xCB43, 0xCB45, 0xCB47, 0xCB49, 0xCB4B, 0xCB4D, 0xCB54, 0xCB55, 0xCB56, 0xCB57, 0xCB59, 0xCB5B, 0xCB5D, 0xCB5F, 0xCB61, 0xCB68, 0xCB69, 0xCB6A, 0xCB6C, 0xCB6E, 0xCB70, 0xCB72, 0xCB74, 0xCB76, 0xCB7D, 0xCB7E, 0xCB80, 0xCB82, 0xCB84, 0xCB86, 0xCB88, 0xCB8A, 0xCB8C, 0xCB8E, 0xCB90, 0xCB92, 0xCB94, 0xCB96, 0xCB98, 0xCB9A, 0xCB9C, 0xCB9E, 0xCBA0, 0xCBA2, 0xCBA4, 0xCBA6, 0xCBA8, 0xCBAF, 0xCBB1, 0xF931, 0xF933, 0xF935, 0xF936, 0xCBB4, 0xCBB6, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 
    0xF943, 0xCBB9, 0xCBBA, 0xF947, 0xF948, 0xF949, 0xF94B, 0xCBBD, 0xCBBF, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xCBC2, 0xCBC3, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xCBC6, 0xCBC8, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xCBCB, 0xCBCC, 0xF972, 0xF973, 0xF975, 0xCBCF, 0xCBD1, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xCBD4, 0xCBD5, 0xF980, 0xF981, 0xF983, 0xCBD8, 0xCBDA, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xCBDD, 0xC606, 0xCBDE, 0xCBDF, 0xCBE1, 0xCBE3, 0xCBE5, 0xCBE7, 0xCBE9, 0xCBEA, 0xCBEB, 0xCBED, 0xCBEF, 0xCBF1, 0xCBF3, 0xCBF4, 0xCBF5, 0xCBF6, 0xCBF7, 0xCBF9, 0xCBFB, 0xCBFD, 0xCBFF, 0xCC00, 0xCC01, 0xCC03, 0xCC05, 0xCC07, 0xCC09, 0xCC0B, 0xCC0D, 0xCC14, 0xCC15, 0xCC16, 0xCC18, 0xCC1A, 0xCC1C, 0xCC1E, 0xCC1F, 0xCC21, 0xCC23, 0xCC25, 0xCC27, 0xCC29, 0xCC2B, 0xCC2C, 0xCC2E, 0xCC30, 0xCC32, 0xCC34, 0xCC35, 0xCC36, 0xCC38, 0xCC39, 0xCC3B, 
    0xCC3D, 0xCC3F, 0xCC41, 0xCC43, 0xCC45, 0xCC46, 0xCC47, 0xCC49, 0xCC4B, 0xCC4D, 0xCC4F, 0xCC51, 0xCC53, 0xCC55, 0xCC57, 0xCC59, 0xCC5B, 0xCC62, 0xCC63, 0xCC64, 0xCC66, 0xCC68, 0xCC6A, 0xCC6C, 0xCC6D, 0xCC6F, 0xCC71, 0xCC73, 0xCC75, 0xCC77, 0xCC79, 0xCC7A, 0xCC7C, 0xCC7E, 0xCC80, 0xCC82, 0xCC83, 0xCC84, 0xCC86, 0xCC87, 0xCC89, 0xCC8B, 0xCC8D, 0xCC8F, 0xCC91, 0xCC93, 0xCC94, 0xCC95, 0xCC97, 0xCC99, 0xCC9B, 0xCC9D, 0xCC9F, 0xCCA1, 0xCCA3, 0xCCA5, 0xCCA7, 0xCCA9, 0xCCB0, 0xCCB1, 0xCCB3, 0xCCB5, 0xCCB7, 0xCCB8, 0xCCBA, 0xCCBB, 0xCCBD, 0xCCBF, 0xCCC1, 0xCCC3, 0xCCC5, 0xCCC7, 0xCCC9, 0xCCCB, 0xCCCD, 0xCCCF, 0xCCD1, 0xCCD2, 0xCCD3, 0xCCD4, 0xCCD6, 0xCCD8, 0xCCDA, 0xCCDC, 0xCCDE, 0xCCE0, 0xCCE2, 0xCCE4, 0xCCE6, 0xCCE8, 0xCCEF, 0xCCF0, 0xCCF2, 0xCCF4, 0xCCF6, 0xCCF7, 0xCCF9, 0xCCFA, 0xCCFC, 0xCCFE, 0xCD00, 0xCD02, 0xCD04, 0xCD06, 0xCD08, 0xCD0A, 0xCD0C, 0xCD0E, 0xCD10, 
    0xCD11, 0xCD12, 0xCD13, 0xCD15, 0xCD17, 0xCD19, 0xCD1B, 0xCD1D, 0xCD1F, 0xCD21, 0xCD23, 0xCD25, 0xCD27, 0xCD2E, 0xCD2F, 0xCD31, 0xCD33, 0xCD35, 0xCD36, 0xCD38, 0xCD39, 0xCD3B, 0xCD3D, 0xCD3F, 0xCD41, 0xCD43, 0xCD45, 0xCD47, 0xCD49, 0xCD4B, 0xCD4D, 0xCD4F, 0xCD50, 0xCD51, 0xCD52, 0xCD54, 0xCD56, 0xCD58, 0xCD5A, 0xCD5C, 0xCD5E, 0xCD60, 0xCD62, 0xCD64, 0xCD66, 0xCD6D, 0xCD6E, 0xCD70, 0xCD72, 0xCD74, 0xCD75, 0xCD77, 0xCD78, 0xCD7A, 0xCD7C, 0xCD7E, 0xCD80, 0xCD82, 0xCD84, 0xCD86, 0xCD88, 0xCD8A, 0xCD8C, 0xCD8E, 0xCD8F, 0xCD90, 0xCD91, 0xCD93, 0xCD95, 0xCD97, 0xCD99, 0xCD9B, 0xCD9D, 0xCD9F, 0xCDA1, 0xCDA3, 0xCDA5, 0xCDAC, 0xCDAD, 0xCDAE, 0xCDB1, 0xCDB3, 0xCDB5, 0xCDB7, 0xCDB8, 0xCDBA, 0xCDBB, 0xCDBD, 0xCDBF, 0xCDC1, 0xCDC3, 0xCDC5, 0xCDC7, 0xCDC9, 0xCDCB, 0xCDCD, 0xCDCF, 0xCDD1, 0xCDD3, 0xCDD4, 0xCDD5, 0xCDD7, 0xCDD8, 0xCDDA, 0xCDDC, 0xCDDE, 0xCDE0, 0xCDE2, 0xCDE4, 
    0xCDE6, 0xCDE8, 0xCDEA, 0xCDEC, 0xCDF3, 0xCDF6, 0xCDF7, 0xC609, 0xCDF8, 0xCDFA, 0xCDFC, 0xCDFD, 0xCE00, 0xCE01, 0xCE03, 0xCE04, 0xCE06, 0xCE07, 0xCE09, 0xCE0A, 0xCE0B, 0xCE0D, 0xCE0F, 0xCE10, 0xCE12, 0xCE14, 0xCE15, 0xCE17, 0xCE19, 0xCE1A, 0xCE1C, 0xCE1E, 0xCE21, 0xCE23, 0xCE25, 0xCE28, 0xCE2A, 0xCE2C, 0xCE33, 0xCE34, 0xCE36, 0xCE37, 0xCE3D, 0xCE3E, 0xCE40, 0xCE42, 0xCE43, 0xCE44, 0xCE45, 0xCE47, 0xCE49, 0xCE4B, 0xCE4E, 0xCE4F, 0xCE51, 0xCE53, 0xCE54, 0xCE56, 0xCE58, 0xCE5F, 0xCE60, 0xCE62, 0xCE63, 0xCE65, 0xCE66, 0xCE67, 0xCE69, 0xCE6B, 0xCE6C, 0xCE6E, 0xCE70, 0xCE66, 0xCE73, 0xCE75, 0xCE77, 0xCE79, 0xCE7B, 0xCE7D, 0xCE7F, 0xCE81, 0xCE83, 0xCE85, 0xCE87, 0xCE88, 0xCE89, 0xCE8B, 0xCE66, 0xCE8E, 0xCE90, 0xCE92, 0xCE94, 0xCE96, 0xCE9D, 0xCE9E, 0xCEA0, 0xCEA1, 0xCEA3, 0xCEA4, 0xCEA6, 0xCEA7, 0xCEA9, 0xCEAB, 0xCEAD, 0xCEAE, 0xCEB0, 0xCEB2, 0xCEB4, 0xCEB6, 0xCEB8, 
    0xCEBA, 0xCEBC, 0xCEBE, 0xCEC0, 0xCEC2, 0xCEC4, 0xCEC5, 0xCEC7, 0xCEC8, 0xCECA, 0xCECB, 0xCECD, 0xCECE, 0xCED0, 0xCED2, 0xCED4, 0xCED6, 0xCED8, 0xCEDA, 0xCEDC, 0xCEDE, 0xCEE0, 0xCEE2, 0xCEE9, 0xCEEC, 0xCEED, 0xC60C, 0xCEEE, 0xCEF0, 0xCEF2, 0xCEF4, 0xCEF6, 0xCEF7, 0xCEF9, 0xCEFA, 0xCEFC, 0xCEFD, 0xCEFF, 0xCF01, 0xCF03, 0xCF05, 0xCF07, 0xCF09, 0xCF0A, 0xCF0C, 0xCF0D, 0xCF0F, 0xCF11, 0xCF13, 0xCF15, 0xCF17, 0xCF19, 0xCF20, 0xCF21, 0xCF23, 0xCF24, 0xCF26, 0xCF27, 0xCF29, 0xCF2B, 0xCF2D, 0xCF2F, 0xCF31, 0xCF33, 0xCF34, 0xCF35, 0xCF37, 0xCF38, 0xCF3A, 0xCF3C, 0xCF3E, 0xCF40, 0xCF42, 0xCF44, 0xCF4B, 0xCF4C, 0xCF4E, 0xCF4F, 0xCF51, 0xCF52, 0xCF54, 0xCF56, 0xCF58, 0xCF5A, 0xCF5C, 0xCF5E, 0xCF5F, 0xCF60, 0xCF62, 0xCF63, 0xCF65, 0xCF67, 0xCF69, 0xCF6B, 0xCF6D, 0xCF6F, 0xCF76, 0xCF77, 0xCF79, 0xCF7A, 0xCF7C, 0xCF7D, 0xCF7F, 0xCF81, 0xCF83, 0xCF85, 0xCF87, 0xCF89, 0xCF8A, 
    0xCF8B, 0xCF8D, 0xCF8E, 0xCF90, 0xCF92, 0xCF94, 0xCF96, 0xCF98, 0xCF9A, 0xCFA1, 0xC60F, 0xCFA2, 0xCFA4, 0xCFA7, 0xCFA9, 0xCFAB, 0xCFAD, 0xCFAF, 0xCFB1, 0xCFB3, 0xCFB5, 0xCFB7, 0xCFB9, 0xCFBB, 0xCFBD, 0xCFBF, 0xCFC1, 0xCFC3, 0xCFC5, 0xCFC7, 0xCFCA, 0xCFCC, 0xCFCF, 0xCFD1, 0xCFD4, 0xCFD6, 0xCFD9, 0xCFDB, 0xCFDD, 0xCFDF, 0xCFE1, 0xCFE2, 0xCFE3, 0xCFE5, 0xCFE7, 0xCFE9, 0xCFEA, 0xCFEC, 0xCFEE, 0xCFF0, 0xCFF2, 0xCFF4, 0xCFF6, 0xCFF8, 0xCFFA, 0xCFFC, 0xCFFE, 0xD005, 0xD007, 0xD009, 0xD00B, 0xD00C, 0xD00D, 0xD00F, 0xD011, 0xD012, 0xD014, 0xD016, 0xD018, 0xD01A, 0xD01C, 0xD01F, 0xD021, 0xD023, 0xD026, 0xD028, 0xD02A, 0xD02D, 0xD02F, 0xD031, 0xD034, 0xD036, 0xD03D, 0xD040, 0xD042, 0xD044, 0xD047, 0xD049, 0xD04C, 0xD04E, 0xD050, 0xF7B6, 0xF7B7, 0xF7B9, 0xF7BB, 0xF7BD, 0xF7BF, 0xD053, 0xD055, 0xF7C0, 0xF7C2, 0xF7C4, 0xF7C6, 0xF7C8, 0xF7CA, 0xD058, 0xD059, 0xF7CE, 0xF7CF, 
    0xF7D0, 0xF7D2, 0xD05C, 0xD05E, 0xF7D3, 0xF7D5, 0xF7D7, 0xF7D9, 0xF7DB, 0xD061, 0xD062, 0xF7DF, 0xF7E0, 0xF7E2, 0xF7E4, 0xD065, 0xD067, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7EB, 0xF7ED, 0xD06A, 0xD06B, 0xD06D, 0xD070, 0xF7F1, 0xF7F2, 0xF7F3, 0xF7F5, 0xD073, 0xD075, 0xF7F6, 0xF7F8, 0xF7FA, 0xF7FC, 0xF7FE, 0xF800, 0xD078, 0xD079, 0xF804, 0xF805, 0xF807, 0xF809, 0xD07C, 0xD07E, 0xF80A, 0xF80C, 0xF80E, 0xF810, 0xF812, 0xF814, 0xD081, 0xD082, 0xD084, 0xD087, 0xF818, 0xF819, 0xF81A, 0xF81C, 0xD08A, 0xD08C, 0xF81D, 0xF81F, 0xF821, 0xF823, 0xF825, 0xD08F, 0xD090, 0xD092, 0xD095, 0xF829, 0xF82A, 0xF82C, 0xF82E, 0xD098, 0xD09A, 0xF82F, 0xF831, 0xF833, 0xF835, 0xF837, 0xF839, 0xD09D, 0xD09E, 0xF83D, 0xF83E, 0xF840, 0xF842, 0xD0A1, 0xD0A3, 0xF843, 0xF845, 0xF847, 0xF849, 0xF84B, 0xF84D, 0xD0A6, 0xD0A7, 0xD0A9, 0xD0AC, 0xF851, 0xF852, 0xF853, 0xF855, 0xD0AF, 0xD0B1, 0xF856, 0xF858, 
    0xF85A, 0xF85C, 0xF85E, 0xF860, 0xD0B4, 0xD0B5, 0xD0B7, 0xD0BA, 0xF864, 0xF865, 0xF867, 0xF869, 0xD0BD, 0xD0BF, 0xF86A, 0xF86C, 0xF86E, 0xF870, 0xF872, 0xF874, 0xD0C2, 0xD0C3, 0xF878, 0xF879, 0xF87A, 0xF87C, 0xD0C6, 0xD0C8, 0xF87D, 0xF87F, 0xF881, 0xF883, 0xF885, 0xD0CB, 0xD0CC, 0xD0CE, 0xD0D1, 0xF889, 0xF88B, 0xF88D, 0xD0D4, 0xD0D6, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xD0D9, 0xD0DA, 0xD0DB, 0xD0DD, 0xD0E0, 0xD0E1, 0xF89A, 0xF89B, 0xD0E4, 0xD0E6, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xD0E9, 0xD0EA, 0xD0EB, 0xD0ED, 0xD0F0, 0xD0F1, 0xD0F3, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xD0F6, 0xD0F7, 0xD0F8, 0xD0FA, 0xD0FD, 0xD0FE, 0xF8B2, 0xF8B4, 0xD101, 0xD103, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xD106, 0xD107, 0xD108, 0xD10A, 0xD10D, 0xD10E, 0xD110, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xD113, 0xD114, 0xD115, 0xD117, 0xD11A, 0xD11B, 0xD11D, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 
    0xD120, 0xD121, 0xD122, 0xD124, 0xD127, 0xD128, 0xD12A, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xD12D, 0xD12E, 0xD130, 0xD133, 0xF931, 0xF933, 0xF935, 0xF936, 0xD136, 0xD138, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xD13B, 0xD13C, 0xD13E, 0xD141, 0xF947, 0xF948, 0xF949, 0xF94B, 0xD144, 0xD146, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xD149, 0xD14A, 0xD14C, 0xD14F, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xD152, 0xD154, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xD157, 0xD158, 0xD15A, 0xD15D, 0xF972, 0xF973, 0xF975, 0xD160, 0xD162, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xD165, 0xD166, 0xD168, 0xD16B, 0xF980, 0xF981, 0xF983, 0xD16E, 0xD170, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xD173, 0xC612, 0xD174, 0xD176, 0xD178, 0xD17A, 0xD17C, 0xD17E, 0xD180, 0xD182, 0xD184, 0xD186, 0xD188, 0xD18A, 0xD18C, 0xD18E, 0xD190, 0xD192, 0xD194, 0xD196, 
    0xD19C, 0xD19E, 0xD1A0, 0xD1A2, 0xD1A4, 0xD1A6, 0xD1A8, 0xD1AA, 0xD1AC, 0xD1B2, 0xD1B4, 0xD1B6, 0xD1B8, 0xD1BA, 0xD1BC, 0xD1BE, 0xD1C0, 0xD1C2, 0xD1C4, 0xD1C6, 0xD1C8, 0xD1CA, 0xD1CC, 0xD1CE, 0xD1D0, 0xD1D6, 0xD1D8, 0xD1DA, 0xD1DC, 0xD1DE, 0xD1E0, 0xD1E2, 0xD1E4, 0xD1E6, 0xD1EC, 0xD1EE, 0xD1F0, 0xD1F2, 0xD1F4, 0xD1F6, 0xD1F8, 0xD1FA, 0xD1FC, 0xD1FE, 0xD200, 0xD202, 0xD204, 0xD206, 0xD208, 0xD20A, 0xD210, 0xD212, 0xD214, 0xD216, 0xD218, 0xD21A, 0xD21C, 0xD21E, 0xD220, 0xD226, 0xD228, 0xD22A, 0xD22C, 0xD22E, 0xD230, 0xD232, 0xD234, 0xD236, 0xD238, 0xD23A, 0xD23C, 0xD23E, 0xD240, 0xD242, 0xD248, 0xD24A, 0xD24C, 0xD24E, 0xD250, 0xD252, 0xD254, 0xD256, 0xD258, 0xD25E, 0xD260, 0xD262, 0xD264, 0xF7B6, 0xF7B7, 0xF7B9, 0xF7BB, 0xF7BD, 0xF7BF, 0xD267, 0xD269, 0xF7C0, 0xF7C2, 0xF7C4, 0xF7C6, 0xF7C8, 0xF7CA, 0xD26C, 0xD26D, 0xD26F, 0xD271, 0xF7CE, 0xF7CF, 0xF7D0, 0xF7D2, 
    0xD274, 0xD276, 0xF7D3, 0xF7D5, 0xF7D7, 0xF7D9, 0xF7DB, 0xD279, 0xD27A, 0xD27C, 0xD27E, 0xF7DF, 0xF7E0, 0xF7E2, 0xF7E4, 0xD281, 0xD283, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7EB, 0xF7ED, 0xD286, 0xD287, 0xD289, 0xD28B, 0xF7F1, 0xF7F2, 0xF7F3, 0xF7F5, 0xD28E, 0xD290, 0xF7F6, 0xF7F8, 0xF7FA, 0xF7FC, 0xF7FE, 0xF800, 0xD293, 0xD294, 0xD296, 0xD298, 0xF804, 0xF805, 0xF807, 0xF809, 0xD29B, 0xD29D, 0xF80A, 0xF80C, 0xF80E, 0xF810, 0xF812, 0xF814, 0xD2A0, 0xD2A1, 0xD2A3, 0xD2A5, 0xF818, 0xF819, 0xF81A, 0xF81C, 0xD2A8, 0xD2AA, 0xF81D, 0xF81F, 0xF821, 0xF823, 0xF825, 0xD2AD, 0xD2AE, 0xD2B0, 0xD2B2, 0xF829, 0xF82A, 0xF82C, 0xF82E, 0xD2B5, 0xD2B7, 0xF82F, 0xF831, 0xF833, 0xF835, 0xF837, 0xF839, 0xD2BA, 0xD2BB, 0xF83D, 0xF83E, 0xF840, 0xF842, 0xD2BE, 0xD2C0, 0xF843, 0xF845, 0xF847, 0xF849, 0xF84B, 0xF84D, 0xD2C3, 0xD2C4, 0xD2C6, 0xD2C8, 0xF851, 0xF852, 0xF853, 0xF855, 0xD2CB, 0xD2CD, 
    0xF856, 0xF858, 0xF85A, 0xF85C, 0xF85E, 0xF860, 0xD2D0, 0xD2D1, 0xD2D3, 0xD2D5, 0xF864, 0xF865, 0xF867, 0xF869, 0xD2D8, 0xD2DA, 0xF86A, 0xF86C, 0xF86E, 0xF870, 0xF872, 0xF874, 0xD2DD, 0xD2DE, 0xF878, 0xF879, 0xF87A, 0xF87C, 0xD2E1, 0xD2E3, 0xF87D, 0xF87F, 0xF881, 0xF883, 0xF885, 0xD2E6, 0xD2E7, 0xD2E9, 0xD2EB, 0xF889, 0xF88B, 0xF88D, 0xD2EE, 0xD2F0, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xD2F3, 0xD2F4, 0xD2F5, 0xD2F7, 0xD2F9, 0xD2FA, 0xF89A, 0xF89B, 0xD2FD, 0xD2FF, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xD302, 0xD303, 0xD304, 0xD306, 0xD308, 0xD309, 0xD30B, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xD30E, 0xD30F, 0xD310, 0xD312, 0xD314, 0xD315, 0xF8B2, 0xF8B4, 0xD318, 0xD31A, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xD31D, 0xD31E, 0xD31F, 0xD321, 0xD323, 0xD324, 0xD326, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xD329, 0xD32A, 0xD32B, 0xD32D, 0xD32F, 0xD330, 0xD332, 0xF8C9, 0xF8CB, 
    0xF8CD, 0xF8CF, 0xD335, 0xD336, 0xD337, 0xD339, 0xD33B, 0xD33C, 0xD33E, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xD341, 0xD342, 0xD344, 0xD346, 0xF931, 0xF933, 0xF935, 0xF936, 0xD349, 0xD34B, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xD34E, 0xD34F, 0xD351, 0xD353, 0xF947, 0xF948, 0xF949, 0xF94B, 0xD356, 0xD358, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xD35B, 0xD35C, 0xD35E, 0xD360, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xD363, 0xD365, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xD368, 0xD369, 0xD36B, 0xD36D, 0xF972, 0xF973, 0xF975, 0xD370, 0xD372, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xD375, 0xD376, 0xD378, 0xD37A, 0xF980, 0xF981, 0xF983, 0xD37D, 0xD37F, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xD382, 0xD383, 0xD385, 0xD387, 0xF889, 0xF88B, 0xF88D, 0xD38A, 0xD38B, 0xD38D, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xD390, 0xD391, 0xD393, 
    0xD395, 0xF89A, 0xF89B, 0xD398, 0xD39A, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xD39D, 0xD39E, 0xD3A0, 0xD3A2, 0xD3A4, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xD3A7, 0xD3A8, 0xD3AA, 0xD3AC, 0xF8B2, 0xF8B4, 0xD3AF, 0xD3B0, 0xD3B2, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xD3B5, 0xD3B6, 0xD3B8, 0xD3BA, 0xD3BC, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xD3BF, 0xD3C0, 0xD3C2, 0xD3C4, 0xD3C6, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 0xD3C9, 0xD3CA, 0xD3CC, 0xD3CE, 0xD3D0, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xD3D3, 0xD3D4, 0xD3D5, 0xD3D6, 0xD3D8, 0xD3DA, 0xF8DD, 0xF8DF, 0xF8E1, 0xD3DD, 0xD3DF, 0xF8E2, 0xF8E4, 0xF8E6, 0xF8E8, 0xF8EA, 0xD3E2, 0xD3E3, 0xD3E5, 0xD3E7, 0xF8EE, 0xF8EF, 0xD3EA, 0xD3EC, 0xF8F0, 0xF8F2, 0xF8F4, 0xF8F6, 0xF8F8, 0xD3EF, 0xD3F0, 0xD3F2, 0xD3F4, 0xD3F6, 0xF8FC, 0xF8FE, 0xF900, 0xF902, 0xD3F9, 0xD3FA, 0xD3FC, 0xD3FE, 0xF906, 0xF908, 0xD401, 0xD403, 0xF909, 0xF90B, 0xF90D, 0xF90F, 
    0xD406, 0xD407, 0xD409, 0xD40B, 0xD40D, 0xF913, 0xF915, 0xF917, 0xF919, 0xD410, 0xD411, 0xD413, 0xD415, 0xD417, 0xF91D, 0xF91F, 0xF921, 0xF923, 0xD41A, 0xD41B, 0xD41D, 0xD41F, 0xD421, 0xF927, 0xF929, 0xF92B, 0xF92D, 0xD424, 0xD425, 0xD426, 0xD427, 0xF990, 0xF992, 0xF994, 0xF996, 0xF997, 0xF999, 0xF99A, 0xF99C, 0xD42A, 0xD42C, 0xD42E, 0xD430, 0xF99D, 0xF99F, 0xF9A1, 0xF9A3, 0xF9A5, 0xF9A7, 0xF9A9, 0xF9AA, 0xF9AC, 0xD433, 0xD434, 0xD436, 0xD438, 0xD43A, 0xF9AD, 0xF9AF, 0xF9B1, 0xF9B3, 0xF9B5, 0xF9B7, 0xF9B9, 0xD43D, 0xD43E, 0xF9BD, 0xF9BF, 0xF9C0, 0xF9C2, 0xD441, 0xD443, 0xD445, 0xD447, 0xF9C3, 0xF9C5, 0xF9C7, 0xF9C9, 0xF9CB, 0xF9CD, 0xF9CF, 0xF9D0, 0xF9D2, 0xF9D3, 0xD44A, 0xD44B, 0xD44D, 0xD44F, 0xD451, 0xF9D4, 0xF9D6, 0xF9D8, 0xF9DA, 0xF9DC, 0xF9DE, 0xF9E0, 0xD454, 0xD455, 0xF9E4, 0xF9E6, 0xF9E7, 0xF9E9, 0xD458, 0xD45A, 0xD45C, 0xD45E, 0xF9EA, 0xF9EC, 0xF9EE, 
    0xF9F0, 0xF9F2, 0xF9F4, 0xF9F6, 0xF9F7, 0xF9F8, 0xF9FA, 0xD461, 0xD462, 0xD464, 0xD466, 0xD468, 0xF9FB, 0xF9FD, 0xF9FF, 0xFA01, 0xFA03, 0xFA05, 0xFA07, 0xD46B, 0xD46C, 0xFA0A, 0xFA0C, 0xFA0D, 0xFA0F, 0xD46F, 0xD471, 0xD473, 0xD475, 0xFA10, 0xFA12, 0xFA14, 0xFA16, 0xFA18, 0xFA1A, 0xFA1C, 0xFA1D, 0xFA1E, 0xFA20, 0xD478, 0xD479, 0xD47B, 0xD47D, 0xD47F, 0xFA21, 0xFA23, 0xFA25, 0xFA27, 0xFA29, 0xFA2B, 0xFA2D, 0xD482, 0xD484, 0xD486, 0xD488, 0xD48A, 0xD48B, 0xD48D, 0xD48F, 0xD491, 0xD493, 0xD495, 0xD497, 0xD499, 0xD49F, 0xD4A1, 0xD4A3, 0xD4A4, 0xD4A5, 0xD4A7, 0xD4A9, 0xD4AB, 0xD4AD, 0xD4AF, 0xD4B1, 0xD4B3, 0xD4B9, 0xD4BB, 0xD4BD, 0xD4BF, 0xD4C0, 0xD4C2, 0xD4C4, 0xD4C6, 0xD4C8, 0xD4CA, 0xD4CC, 0xD4CE, 0xD4D4, 0xD4D6, 0xD4D8, 0xD4D9, 0xD4DA, 0xD4DC, 0xD4DE, 0xD4E0, 0xD4E2, 0xD4E4, 0xD4E6, 0xD4E8, 0xD4EE, 0xD4F0, 0xD4F2, 0xD4F4, 0xD4FA, 0xC615, 0xD4FB, 0xD4FD, 0xD500, 
    0xD502, 0xD504, 0xD506, 0xD508, 0xD50A, 0xD50C, 0xD50F, 0xD511, 0xD513, 0xD515, 0xD517, 0xD519, 0xD51B, 0xD51D, 0xD51F, 0xD525, 0xD527, 0xD529, 0xD52C, 0xD52E, 0xD530, 0xD532, 0xD535, 0xD537, 0xD53D, 0xD53F, 0xD542, 0xD544, 0xD546, 0xD548, 0xD54A, 0xD54D, 0xD54F, 0xD551, 0xD553, 0xD555, 0xD557, 0xD559, 0xD55B, 0xD55D, 0xD563, 0xD565, 0xD567, 0xD56A, 0xD56C, 0xD56E, 0xD570, 0xD573, 0xD575, 0xD57B, 0xD57D, 0xD57F, 0xD582, 0xD584, 0xD586, 0xD588, 0xD58B, 0xD58D, 0xD58F, 0xD591, 0xD593, 0xD595, 0xD597, 0xD599, 0xD59B, 0xD5A1, 0xD5A3, 0xD5A5, 0xD5A8, 0xD5AA, 0xD5AC, 0xD5AE, 0xD5B1, 0xD5B3, 0xD5B9, 0xD5BB, 0xD5BE, 0xD5C0, 0xD5C2, 0xD5C4, 0xD5C7, 0xD5C9, 0xD5CB, 0xD5CD, 0xD5CF, 0xD5D1, 0xD5D3, 0xD5D5, 0xD5D7, 0xD5DD, 0xD5DF, 0xD5E2, 0xD5E4, 0xD5E7, 0xD5E9, 0xD5EB, 0xD5ED, 0xD5EF, 0xD5F5, 0xD5F7, 0xD5F9, 0xD5FC, 0xF7B6, 0xF7B7, 0xF7B9, 0xF7BB, 0xF7BD, 0xF7BF, 0xD5FF, 
    0xD602, 0xF7C0, 0xF7C2, 0xF7C4, 0xF7C6, 0xF7C8, 0xF7CA, 0xD605, 0xD606, 0xD608, 0xD60B, 0xF7CE, 0xF7CF, 0xF7D0, 0xF7D2, 0xD60E, 0xD611, 0xF7D3, 0xF7D5, 0xF7D7, 0xF7D9, 0xF7DB, 0xD614, 0xD615, 0xD617, 0xD61A, 0xF7DF, 0xF7E0, 0xF7E2, 0xF7E4, 0xD61D, 0xD620, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7EB, 0xF7ED, 0xD623, 0xD624, 0xD626, 0xD629, 0xF7F1, 0xF7F2, 0xF7F3, 0xF7F5, 0xD62C, 0xD62F, 0xF7F6, 0xF7F8, 0xF7FA, 0xF7FC, 0xF7FE, 0xF800, 0xD632, 0xD633, 0xD635, 0xD638, 0xF804, 0xF805, 0xF807, 0xF809, 0xD63B, 0xD63E, 0xF80A, 0xF80C, 0xF80E, 0xF810, 0xF812, 0xF814, 0xD641, 0xD642, 0xD644, 0xD647, 0xF818, 0xF819, 0xF81A, 0xF81C, 0xD64A, 0xD64D, 0xF81D, 0xF81F, 0xF821, 0xF823, 0xF825, 0xD650, 0xD651, 0xD653, 0xD656, 0xF829, 0xF82A, 0xF82C, 0xF82E, 0xD659, 0xD65C, 0xF82F, 0xF831, 0xF833, 0xF835, 0xF837, 0xF839, 0xD65F, 0xD660, 0xF83D, 0xF83E, 0xF840, 0xF842, 0xD663, 0xD666, 0xF843, 
    0xF845, 0xF847, 0xF849, 0xF84B, 0xF84D, 0xD669, 0xD66A, 0xD66C, 0xD66F, 0xF851, 0xF852, 0xF853, 0xF855, 0xD672, 0xD675, 0xF856, 0xF858, 0xF85A, 0xF85C, 0xF85E, 0xF860, 0xD678, 0xD679, 0xD67B, 0xD67E, 0xF864, 0xF865, 0xF867, 0xF869, 0xD681, 0xD684, 0xF86A, 0xF86C, 0xF86E, 0xF870, 0xF872, 0xF874, 0xD687, 0xD688, 0xF878, 0xF879, 0xF87A, 0xF87C, 0xD68B, 0xD68E, 0xF87D, 0xF87F, 0xF881, 0xF883, 0xF885, 0xD691, 0xD692, 0xD694, 0xD697, 0xF889, 0xF88B, 0xF88D, 0xD69A, 0xD69D, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xD6A0, 0xD6A1, 0xD6A2, 0xD6A4, 0xD6A7, 0xD6A8, 0xF89A, 0xF89B, 0xD6AB, 0xD6AE, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xD6B1, 0xD6B2, 0xD6B3, 0xD6B5, 0xD6B8, 0xD6B9, 0xD6BC, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xD6BF, 0xD6C0, 0xD6C1, 0xD6C3, 0xD6C6, 0xD6C7, 0xF8B2, 0xF8B4, 0xD6CA, 0xD6CD, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xD6D0, 0xD6D1, 0xD6D2, 0xD6D4, 0xD6D7, 
    0xD6D8, 0xD6DB, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xD6DE, 0xD6DF, 0xD6E0, 0xD6E2, 0xD6E5, 0xD6E6, 0xD6E9, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 0xD6EC, 0xD6ED, 0xD6EE, 0xD6F0, 0xD6F3, 0xD6F4, 0xD6F7, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xD6FA, 0xD6FB, 0xD6FD, 0xD700, 0xF931, 0xF933, 0xF935, 0xF936, 0xD703, 0xD706, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xD709, 0xD70A, 0xD70C, 0xD70F, 0xF947, 0xF948, 0xF949, 0xF94B, 0xD712, 0xD715, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xD718, 0xD719, 0xD71B, 0xD71E, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xD721, 0xD724, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xD727, 0xD728, 0xD72A, 0xD72D, 0xF972, 0xF973, 0xF975, 0xD730, 0xD733, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xD736, 0xD737, 0xD739, 0xD73C, 0xF980, 0xF981, 0xF983, 0xD73F, 0xD742, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xD745, 0xD746, 0xD748, 
    0xD74B, 0xF889, 0xF88B, 0xF88D, 0xD74E, 0xD74F, 0xD752, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xD755, 0xD756, 0xD758, 0xD75B, 0xF89A, 0xF89B, 0xD75E, 0xD761, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xD764, 0xD765, 0xD767, 0xD76A, 0xD76D, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xD770, 0xD771, 0xD773, 0xD776, 0xF8B2, 0xF8B4, 0xD779, 0xD77A, 0xD77D, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xD780, 0xD781, 0xD783, 0xD786, 0xD789, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xD78C, 0xD78D, 0xD78F, 0xD792, 0xD795, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 0xD798, 0xD799, 0xD79B, 0xD79E, 0xD7A1, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xD7A4, 0xD7A5, 0xD7A6, 0xD7A7, 0xD7A9, 0xD7AC, 0xF8DD, 0xF8DF, 0xF8E1, 0xD7AF, 0xD7B2, 0xF8E2, 0xF8E4, 0xF8E6, 0xF8E8, 0xF8EA, 0xD7B5, 0xD7B6, 0xD7B8, 0xD7BB, 0xF8EE, 0xF8EF, 0xD7BE, 0xD7C1, 0xF8F0, 0xF8F2, 0xF8F4, 0xF8F6, 0xF8F8, 0xD7C4, 0xD7C5, 0xD7C7, 0xD7CA, 0xD7CD, 0xF8FC, 
    0xF8FE, 0xF900, 0xF902, 0xD7D0, 0xD7D1, 0xD7D3, 0xD7D6, 0xF906, 0xF908, 0xD7D9, 0xD7DC, 0xF909, 0xF90B, 0xF90D, 0xF90F, 0xD7DF, 0xD7E0, 0xD7E2, 0xD7E5, 0xD7E8, 0xF913, 0xF915, 0xF917, 0xF919, 0xD7EB, 0xD7EC, 0xD7EE, 0xD7F1, 0xD7F4, 0xF91D, 0xF91F, 0xF921, 0xF923, 0xD7F7, 0xD7F8, 0xD7FA, 0xD7FD, 0xD800, 0xF927, 0xF929, 0xF92B, 0xF92D, 0xD803, 0xD804, 0xD805, 0xD806, 0xF990, 0xF992, 0xF994, 0xF996, 0xF997, 0xF999, 0xF99A, 0xF99C, 0xD809, 0xD80C, 0xD80F, 0xD812, 0xF99D, 0xF99F, 0xF9A1, 0xF9A3, 0xF9A5, 0xF9A7, 0xF9A9, 0xF9AA, 0xF9AC, 0xD815, 0xD816, 0xD819, 0xD81C, 0xD81F, 0xF9AD, 0xF9AF, 0xF9B1, 0xF9B3, 0xF9B5, 0xF9B7, 0xF9B9, 0xD822, 0xD823, 0xF9BD, 0xF9BF, 0xF9C0, 0xF9C2, 0xD826, 0xD829, 0xD82C, 0xD82F, 0xF9C3, 0xF9C5, 0xF9C7, 0xF9C9, 0xF9CB, 0xF9CD, 0xF9CF, 0xF9D0, 0xF9D2, 0xF9D3, 0xD832, 0xD833, 0xD836, 0xD839, 0xD83C, 0xF9D4, 0xF9D6, 0xF9D8, 0xF9DA, 0xF9DC, 
    0xF9DE, 0xF9E0, 0xD83F, 0xD840, 0xF9E4, 0xF9E6, 0xF9E7, 0xF9E9, 0xD843, 0xD846, 0xD849, 0xD84C, 0xF9EA, 0xF9EC, 0xF9EE, 0xF9F0, 0xF9F2, 0xF9F4, 0xF9F6, 0xF9F7, 0xF9F8, 0xF9FA, 0xD84F, 0xD850, 0xD853, 0xD856, 0xD859, 0xF9FB, 0xF9FD, 0xF9FF, 0xFA01, 0xFA03, 0xFA05, 0xFA07, 0xD85C, 0xD85D, 0xFA0A, 0xFA0C, 0xFA0D, 0xFA0F, 0xD860, 0xD863, 0xD866, 0xD869, 0xFA10, 0xFA12, 0xFA14, 0xFA16, 0xFA18, 0xFA1A, 0xFA1C, 0xFA1D, 0xFA1E, 0xFA20, 0xD86C, 0xD86D, 0xD870, 0xD873, 0xD876, 0xFA21, 0xFA23, 0xFA25, 0xFA27, 0xFA29, 0xFA2B, 0xFA2D, 0xD879, 0xD87B, 0xD87E, 0xD880, 0xD882, 0xD883, 0xD886, 0xD888, 0xD88A, 0xD88C, 0xD88E, 0xD891, 0xD893, 0xD899, 0xD89B, 0xD89E, 0xD89F, 0xD8A0, 0xD8A3, 0xD8A5, 0xD8A7, 0xD8A9, 0xD8AB, 0xD8AE, 0xD8B0, 0xD8B6, 0xD8B8, 0xD8BB, 0xD8BD, 0xD8BE, 0xD8C1, 0xD8C3, 0xD8C5, 0xD8C7, 0xD8C9, 0xD8CC, 0xD8CE, 0xD8D4, 0xD8D6, 0xD8D9, 0xD8DA, 0xD8DB, 0xD8DE, 
    0xD8E0, 0xD8E2, 0xD8E4, 0xD8E6, 0xD8E9, 0xD8EB, 0xD8F1, 0xD8F3, 0xD8F6, 0xD8F9, 0xD8FF, 0xC618, 0xD900, 0xD902, 0xD904, 0xD906, 0xD909, 0xD90B, 0xD90E, 0xD910, 0xD912, 0xD914, 0xD916, 0xD918, 0xD91A, 0xD91C, 0xD91E, 0xD91F, 0xD921, 0xD922, 0xD924, 0xD926, 0xD928, 0xD92A, 0xD92C, 0xD92E, 0xD930, 0xD936, 0xD938, 0xD93A, 0xD93C, 0xD93E, 0xD940, 0xD942, 0xD944, 0xD946, 0xD94C, 0xD94E, 0xD94F, 0xD951, 0xD953, 0xD955, 0xD957, 0xD959, 0xD95B, 0xD95D, 0xD963, 0xD964, 0xD966, 0xD968, 0xD96A, 0xD96C, 0xD96E, 0xD970, 0xD972, 0xD973, 0xD975, 0xD977, 0xD979, 0xD97B, 0xD97E, 0xD980, 0xD982, 0xD984, 0xD986, 0xD988, 0xD98A, 0xD98E, 0xD98F, 0xD990, 0xD991, 0xD993, 0xD995, 0xD997, 0xD999, 0xD99B, 0xD99F, 0xD9A0, 0xD9A1, 0xD9A3, 0xD9A5, 0xD9A7, 0xD9A9, 0xD9AB, 0xD9AD, 0xD9B1, 0xD9B2, 0xD9B3, 0xD9B4, 0xD9B6, 0xD9B9, 0xD9BB, 0xD9BD, 0xD9BF, 0xD9C1, 0xD9C3, 0xD9C5, 0xD9C9, 0xD9CA, 
    0xD9CB, 0xD9CD, 0xD9CF, 0xD9D2, 0xD9D4, 0xD9D6, 0xD9D8, 0xD9DA, 0xD9DC, 0xD9DE, 0xD9E2, 0xD9E3, 0xD9E4, 0xD9E5, 0xD9E7, 0xD9EA, 0xD9EC, 0xD9EE, 0xD9F0, 0xD9F2, 0xD9F6, 0xD9F7, 0xD9F8, 0xD9FA, 0xD9FC, 0xD9FF, 0xDA01, 0xDA03, 0xDA05, 0xDA07, 0xDA09, 0xDA0B, 0xDA0F, 0xDA10, 0xDA11, 0xDA13, 0xDA15, 0xDA17, 0xDA19, 0xDA1B, 0xDA1D, 0xDA1F, 0xDA23, 0xDA24, 0xDA25, 0xDA26, 0xDA28, 0xDA2B, 0xDA2D, 0xDA2F, 0xDA31, 0xDA33, 0xDA35, 0xDA39, 0xDA3A, 0xDA3B, 0xDA3D, 0xDA3F, 0xDA42, 0xDA44, 0xDA46, 0xDA48, 0xDA4A, 0xDA4C, 0xDA4E, 0xDA52, 0xDA53, 0xDA54, 0xDA55, 0xDA57, 0xDA5A, 0xDA5C, 0xDA5E, 0xDA60, 0xDA62, 0xDA64, 0xDA68, 0xDA69, 0xDA6B, 0xDA6D, 0xDA70, 0xDA72, 0xDA74, 0xDA76, 0xDA78, 0xDA7C, 0xDA7D, 0xDA7E, 0xDA81, 0xDA83, 0xDA85, 0xDA87, 0xDA89, 0xDA8D, 0xDA8E, 0xDA91, 0xDA94, 0xDA96, 0xDA98, 0xDA9C, 0xDA9D, 0xDA9F, 0xDAA2, 0xDAA4, 0xDAA6, 0xDAA8, 0xDAAA, 0xDAAE, 0xDAAF, 
    0xDAB1, 0xDAB4, 0xDAB6, 0xDAB8, 0xDABA, 0xDABC, 0xDAC0, 0xDAC1, 0xDAC4, 0xDAC6, 0xDAC8, 0xDACA, 0xDACE, 0xDACF, 0xDAD2, 0xDAD5, 0xDAD7, 0xDAD9, 0xDADB, 0xDADF, 0xC61B, 0xC61D, 0xC61F, 0xC621, 0xC623, 0xDAE0, 0xDAE2, 0xDAE4, 0xDAE6, 0xDAE8, 0xDAEA, 0xDAEC, 0xDAEE, 0xDAF0, 0xDAF3, 0xDAF4, 0xDAF6, 0xDAF8, 0xDAFA, 0xDAFC, 0xDAFE, 0xDB00, 0xDB04, 0xDB05, 0xDB06, 0xDB07, 0xDB09, 0xDB0C, 0xDB0E, 0xDB10, 0xDB12, 0xDB14, 0xDB16, 0xDB18, 0xDB1C, 0xDB1D, 0xDB1F, 0xDB20, 0xDB22, 0xDB25, 0xDB28, 0xDB2A, 0xDB2C, 0xDB2E, 0xDB30, 0xDB32, 0xDB34, 0xDB38, 0xDB39, 0xDB3A, 0xDB3C, 0xDB3F, 0xDB41, 0xDB43, 0xDB45, 0xDB47, 0xDB4B, 0xDB4C, 0xDB4D, 0xDB4F, 0xDB52, 0xDB54, 0xDB56, 0xDB58, 0xDB5A, 0xDB5C, 0xDB60, 0xDB61, 0xDB63, 0xDB65, 0xDB67, 0xDB6A, 0xDB6C, 0xDB70, 0xDB71, 0xDB73, 0xDB76, 0xDB78, 0xDB7B, 0xDB7E, 0xDB80, 0xDB83, 0xDB85, 0xDB88, 0xDB8A, 0xDB8D, 0xDB8F, 0xDB92, 0xDB94, 
    0xDB97, 0xDB99, 0xDB9C, 0xDB9E, 0xDBA1, 0xDBA3, 0xDBA6, 0xDBA8, 0xDBAB, 0xDBB5, 0x0300, 0x0302, 0xDBAE, 0xDBB0, 0xDBB4, 0xC626, 0xDF4A, 0xDF4C, 0xDF4F, 0xDF51, 0xDF53, 0xDF55, 0xDF58, 0xDF5A, 0xDF5C, 0xDF5D, 0xDF5F, 0xDF60, 0xDF63, 0xDF65, 0xDF67, 0xDF69, 0xDF6B, 0xDF6D, 0xDF6F, 0xDF75, 0xDF77, 0xDF79, 0xDF7B, 0xDF7D, 0xDF80, 0xDF82, 0xDF84, 0xDF8A, 0xDF8C, 0xDF8E, 0xDF90, 0xDF93, 0xDF95, 0xDF9B, 0xDF9D, 0xDF9E, 0xDFA0, 0xDFA2, 0xDFA4, 0xDFA6, 0xDFA9, 0xDFAB, 0xDFAD, 0xDFB0, 0xDFB2, 0xDFB4, 0xDFB6, 0xDFB8, 0xDFBC, 0xDFBD, 0xDFBE, 0xDFBF, 0xDFC1, 0xDFC4, 0xDFC6, 0xDFC8, 0xDFCA, 0xDFCE, 0xDFCF, 0xDFD0, 0xDFD2, 0xDFD4, 0xDFD7, 0xDFD9, 0xDFDB, 0xDFDD, 0xDFE1, 0xDFE2, 0xDFE3, 0xDFE4, 0xDFE6, 0xDFE9, 0xDFEB, 0xDFEE, 0xDFF0, 0xDFF2, 0xDFF4, 0xDFF6, 0xDFFA, 0xDFFB, 0xDFFC, 0xDFFE, 0xE000, 0xE003, 0xE005, 0xE008, 0xE00A, 0xE00C, 0xE00E, 0xE010, 0xE014, 0xE015, 0xE016, 
    0xE017, 0xE019, 0xE01C, 0xE01F, 0xE021, 0xE023, 0xE025, 0xE029, 0xE02A, 0xE02B, 0xE02D, 0xE02F, 0xE032, 0xE034, 0xE037, 0xE039, 0xE03B, 0xE03D, 0xE03F, 0xE043, 0xE044, 0xE045, 0xE047, 0xE049, 0xE04C, 0xE04E, 0xE050, 0xE052, 0xE054, 0xE058, 0xE059, 0xE05A, 0xE05B, 0xE05D, 0xE060, 0xE063, 0xE065, 0xE067, 0xE069, 0xE06B, 0xE06F, 0xE070, 0xE071, 0xE073, 0xE075, 0xE078, 0xE07A, 0xE07D, 0xE07F, 0xE081, 0xE083, 0xE085, 0xE089, 0xE08A, 0xE08B, 0xE08C, 0xE08E, 0xE091, 0xE093, 0xE096, 0xE098, 0xE09A, 0xE09C, 0xE0A0, 0xE0A1, 0xE0A3, 0xE0A5, 0xE0A8, 0xE0AB, 0xE0AD, 0xE0AF, 0xE0B1, 0xE0B5, 0xE0B6, 0xE0B7, 0xE0BA, 0xE0BD, 0xE0BF, 0xE0C1, 0xE0C3, 0xE0C7, 0xE0C8, 0xE0CB, 0xE0CE, 0xE0D1, 0xE0D3, 0xE0D7, 0xE0D8, 0xE0DA, 0xE0DD, 0xE0DF, 0xE0E2, 0xE0E4, 0xE0E6, 0xE0EA, 0xE0EB, 0xE0ED, 0xE0F0, 0xE0F2, 0xE0F5, 0xE0F7, 0xE0F9, 0xE0FD, 0xE0FE, 0xE101, 0xE104, 0xE106, 0xE108, 0xE10C, 
    0xE10D, 0xE110, 0xE113, 0xE116, 0xE118, 0xE11A, 0xE11E, 0xE11F, 0xE121, 0xE123, 0xE126, 0xE127, 0xE12A, 0xE12C, 0xE12E, 0xE130, 0xE132, 0xE134, 0xE138, 0xE139, 0xE13A, 0xE13B, 0xE13D, 0xE140, 0xE143, 0xE145, 0xE147, 0xE149, 0xE14B, 0xE14D, 0xE151, 0xE152, 0xE154, 0xE155, 0xE157, 0xE15A, 0xE15D, 0xE160, 0xE162, 0xE164, 0xE166, 0xE168, 0xE16A, 0xE16E, 0xE16F, 0xE170, 0xE172, 0xE175, 0xE177, 0xE17A, 0xE17C, 0xE17E, 0xE182, 0xE183, 0xE184, 0xE186, 0xE189, 0xE18B, 0xE18E, 0xE190, 0xE192, 0xE194, 0xE198, 0xE199, 0xE19B, 0xE19D, 0xE1A0, 0xE1A3, 0xE1A5, 0xE1A9, 0xC629, 0xDBB8, 0xDBBA, 0xDBBC, 0xDBBE, 0xDBC0, 0xDBC2, 0xDBC4, 0xDBC6, 0xDBC8, 0xDBCA, 0xDBCB, 0xDBCD, 0xDBCF, 0xDBD1, 0xDBD3, 0xDBD5, 0xDBD7, 0xDBD9, 0xDBDB, 0xDBDD, 0xDBDF, 0xDBE1, 0xDBE7, 0xDBE9, 0xDBEB, 0xDBEC, 0xDBED, 0xDBEF, 0xDBF1, 0xDBF3, 0xDBF5, 0xDBF7, 0xDBF9, 0xDBFB, 0xDBFD, 0xDBFF, 0xDC01, 0xDC03, 
    0xDC09, 0xDC0B, 0xDC0C, 0xDC0E, 0xDC10, 0xDC12, 0xDC14, 0xDC16, 0xDC18, 0xDC1A, 0xDC1C, 0xDC1D, 0xDC1E, 0xDC20, 0xDC22, 0xDC24, 0xDC26, 0xDC28, 0xDC2A, 0xDC2C, 0xDC32, 0xDC34, 0xDC36, 0xDC38, 0xDC3A, 0xF7B6, 0xF7B7, 0xF7B9, 0xF7BB, 0xF7BD, 0xF7BF, 0xDC3D, 0xDC3F, 0xF7C0, 0xF7C2, 0xF7C4, 0xF7C6, 0xF7C8, 0xF7CA, 0xDC42, 0xDC43, 0xDC45, 0xDC47, 0xF7CE, 0xF7CF, 0xF7D0, 0xF7D2, 0xDC4A, 0xDC4C, 0xF7D3, 0xF7D5, 0xF7D7, 0xF7D9, 0xF7DB, 0xDC4F, 0xDC50, 0xDC52, 0xDC54, 0xF7DF, 0xF7E0, 0xF7E2, 0xF7E4, 0xDC57, 0xDC59, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7EB, 0xF7ED, 0xDC5C, 0xDC5D, 0xDC5F, 0xDC61, 0xF7F1, 0xF7F2, 0xF7F3, 0xF7F5, 0xDC64, 0xDC66, 0xF7F6, 0xF7F8, 0xF7FA, 0xF7FC, 0xF7FE, 0xF800, 0xDC69, 0xDC6A, 0xDC6C, 0xDC6E, 0xF804, 0xF805, 0xF807, 0xF809, 0xDC71, 0xDC73, 0xF80A, 0xF80C, 0xF80E, 0xF810, 0xF812, 0xF814, 0xDC76, 0xDC77, 0xDC79, 0xDC7B, 0xF818, 0xF819, 0xF81A, 0xF81C, 
    0xDC7E, 0xDC80, 0xF81D, 0xF81F, 0xF821, 0xF823, 0xF825, 0xDC83, 0xDC84, 0xDC86, 0xDC88, 0xF829, 0xF82A, 0xF82C, 0xF82E, 0xDC8B, 0xDC8D, 0xF82F, 0xF831, 0xF833, 0xF835, 0xF837, 0xF839, 0xDC90, 0xDC91, 0xF83D, 0xF83E, 0xF840, 0xF842, 0xDC94, 0xDC96, 0xF843, 0xF845, 0xF847, 0xF849, 0xF84B, 0xF84D, 0xDC99, 0xDC9A, 0xDC9C, 0xDC9E, 0xF851, 0xF852, 0xF853, 0xF855, 0xDCA1, 0xDCA3, 0xF856, 0xF858, 0xF85A, 0xF85C, 0xF85E, 0xF860, 0xDCA6, 0xDCA7, 0xDCA9, 0xDCAB, 0xF864, 0xF865, 0xF867, 0xF869, 0xDCAE, 0xDCB0, 0xF86A, 0xF86C, 0xF86E, 0xF870, 0xF872, 0xF874, 0xDCB3, 0xDCB4, 0xF878, 0xF879, 0xF87A, 0xF87C, 0xDCB7, 0xDCB9, 0xF87D, 0xF87F, 0xF881, 0xF883, 0xF885, 0xDCBC, 0xDCBD, 0xDCBF, 0xDCC1, 0xF889, 0xF88B, 0xF88D, 0xDCC4, 0xDCC6, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xDCC9, 0xDCCA, 0xDCCB, 0xDCCD, 0xDCCF, 0xDCD0, 0xF89A, 0xF89B, 0xDCD3, 0xDCD5, 0xF89C, 0xF89E, 0xF8A0, 
    0xF8A2, 0xF8A4, 0xDCD8, 0xDCD9, 0xDCDA, 0xDCDC, 0xDCDE, 0xDCDF, 0xDCE1, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xDCE4, 0xDCE5, 0xDCE6, 0xDCE8, 0xDCEA, 0xDCEB, 0xF8B2, 0xF8B4, 0xDCEE, 0xDCF0, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xDCF3, 0xDCF4, 0xDCF5, 0xDCF7, 0xDCF9, 0xDCFA, 0xDCFC, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xDCFF, 0xDD00, 0xDD01, 0xDD03, 0xDD05, 0xDD06, 0xDD08, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 0xDD0B, 0xDD0C, 0xDD0D, 0xDD0F, 0xDD11, 0xDD12, 0xDD14, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xDD17, 0xDD18, 0xDD1A, 0xDD1C, 0xF931, 0xF933, 0xF935, 0xF936, 0xDD1F, 0xDD21, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xDD24, 0xDD25, 0xDD27, 0xDD29, 0xF947, 0xF948, 0xF949, 0xF94B, 0xDD2C, 0xDD2E, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xDD31, 0xDD32, 0xDD34, 0xDD36, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xDD39, 0xDD3B, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 
    0xF96C, 0xF96E, 0xDD3E, 0xDD3F, 0xDD41, 0xDD43, 0xF972, 0xF973, 0xF975, 0xDD46, 0xDD48, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xDD4B, 0xDD4C, 0xDD4E, 0xDD50, 0xF980, 0xF981, 0xF983, 0xDD53, 0xDD55, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xDD58, 0xDD5A, 0xDD5C, 0xDD5E, 0xDD60, 0xDD62, 0xDD64, 0xDD66, 0xDD67, 0xDD69, 0xDD6B, 0xDD6D, 0xDD6F, 0xDD71, 0xDD73, 0xDD75, 0xDD77, 0xDD79, 0xDD7B, 0xDD7D, 0xDD83, 0xDD85, 0xDD87, 0xDD88, 0xDD89, 0xDD8B, 0xDD8D, 0xDD8F, 0xDD91, 0xDD93, 0xDD95, 0xDD97, 0xDD99, 0xDD9B, 0xDD9D, 0xDD9F, 0xDDA5, 0xDDA7, 0xDDA8, 0xDDAA, 0xDDAC, 0xDDAE, 0xDDB0, 0xDDB2, 0xDDB4, 0xDDB6, 0xDDB8, 0xDDB9, 0xDDBA, 0xDDBC, 0xDDBE, 0xDDC0, 0xDDC2, 0xDDC4, 0xDDC6, 0xDDC8, 0xDDCE, 0xDDD0, 0xDDD2, 0xF990, 0xF992, 0xF994, 0xF996, 0xF997, 0xF999, 0xF99A, 0xF99C, 0xDDD5, 0xDDD7, 0xDDD9, 0xDDDB, 0xF99D, 0xF99F, 0xF9A1, 0xF9A3, 0xF9A5, 0xF9A7, 0xF9A9, 0xF9AA, 0xF9AC, 
    0xDDDE, 0xDDDF, 0xDDE1, 0xDDE3, 0xDDE5, 0xF9AD, 0xF9AF, 0xF9B1, 0xF9B3, 0xF9B5, 0xF9B7, 0xF9B9, 0xDDE8, 0xDDE9, 0xF9BD, 0xF9BF, 0xF9C0, 0xF9C2, 0xDDEC, 0xDDEE, 0xDDF0, 0xDDF2, 0xF9C3, 0xF9C5, 0xF9C7, 0xF9C9, 0xF9CB, 0xF9CD, 0xF9CF, 0xF9D0, 0xF9D2, 0xF9D3, 0xDDF5, 0xDDF6, 0xDDF8, 0xDDFA, 0xDDFC, 0xF9D4, 0xF9D6, 0xF9D8, 0xF9DA, 0xF9DC, 0xF9DE, 0xF9E0, 0xDDFF, 0xDE00, 0xF9E4, 0xF9E6, 0xF9E7, 0xF9E9, 0xDE03, 0xDE05, 0xDE07, 0xDE09, 0xF9EA, 0xF9EC, 0xF9EE, 0xF9F0, 0xF9F2, 0xF9F4, 0xF9F6, 0xF9F7, 0xF9F8, 0xF9FA, 0xDE0C, 0xDE0D, 0xDE0F, 0xDE11, 0xDE13, 0xF9FB, 0xF9FD, 0xF9FF, 0xFA01, 0xFA03, 0xFA05, 0xFA07, 0xDE16, 0xDE17, 0xFA0A, 0xFA0C, 0xFA0D, 0xFA0F, 0xDE1A, 0xDE1C, 0xDE1E, 0xDE20, 0xFA10, 0xFA12, 0xFA14, 0xFA16, 0xFA18, 0xFA1A, 0xFA1C, 0xFA1D, 0xFA1E, 0xFA20, 0xDE23, 0xDE24, 0xDE26, 0xDE28, 0xDE2A, 0xFA21, 0xFA23, 0xFA25, 0xFA27, 0xFA29, 0xFA2B, 0xFA2D, 0xDE2D, 
    0xDE2F, 0xDE31, 0xDE33, 0xDE35, 0xDE36, 0xDE38, 0xDE3A, 0xDE3C, 0xDE3E, 0xDE40, 0xDE42, 0xDE44, 0xDE4A, 0xDE4C, 0xDE4E, 0xDE4F, 0xDE50, 0xDE52, 0xDE54, 0xDE56, 0xDE58, 0xDE5A, 0xDE5C, 0xDE5E, 0xDE64, 0xDE66, 0xDE68, 0xDE6A, 0xDE6B, 0xDE6D, 0xDE6F, 0xDE71, 0xDE73, 0xDE75, 0xDE77, 0xDE79, 0xDE7F, 0xDE81, 0xDE83, 0xDE84, 0xDE85, 0xDE87, 0xDE89, 0xDE8B, 0xDE8D, 0xDE8F, 0xDE91, 0xDE93, 0xDE99, 0xDE9B, 0xDE9D, 0xDE9F, 0xDEA5, 0xDEA7, 0xDEA9, 0xDEAB, 0xDEAD, 0xDEAF, 0xDEB0, 0xDEB2, 0xDEB4, 0xDEB6, 0xDEB8, 0xDEBA, 0xDEBC, 0xDEBE, 0xDEC0, 0xDEC2, 0xDEC4, 0xDEC6, 0xDECC, 0xDECE, 0xDED0, 0xDED2, 0xDED4, 0xDED6, 0xDED7, 0xDED8, 0xDEDA, 0xDEDC, 0xDEDE, 0xDEE0, 0xDEE2, 0xDEE4, 0xDEE6, 0xDEE8, 0xDEEA, 0xDEEC, 0xDEF2, 0xDEF4, 0xDEF6, 0xDEF8, 0xDEFA, 0xDEFC, 0xDEFD, 0xDEFE, 0xDF00, 0xDF02, 0xDF04, 0xDF06, 0xDF08, 0xDF0A, 0xDF0C, 0xDF0E, 0xDF10, 0xDF12, 0xDF14, 0xDF16, 0xDF18, 
    0xDF1E, 0xDF20, 0xDF22, 0xDF24, 0xDF26, 0xDF28, 0xDF2A, 0xDF2B, 0xDF2D, 0xDF2F, 0xDF31, 0xDF33, 0xDF35, 0xDF37, 0xDF39, 0xDF3B, 0xDF3D, 0xDF3F, 0xDF41, 0xDF43, 0xDF49, 0xC62C, 0xE1AA, 0xE1AC, 0xE1AE, 0xE1B0, 0xE1B3, 0xE1B5, 0xE1B8, 0xE1BA, 0xE1BC, 0xE1BE, 0xE1BF, 0xE1C1, 0xE1C4, 0xE1C6, 0xE1C8, 0xE1CA, 0xE1CC, 0xE1CE, 0xE1D0, 0xE1D2, 0xE1D4, 0xE1D6, 0xE1DC, 0xE1DE, 0xE1E0, 0xE1E1, 0xE1E2, 0xE1E4, 0xE1E7, 0xE1E9, 0xE1EB, 0xE1ED, 0xE1EF, 0xE1F1, 0xE1F3, 0xE1F5, 0xE1F7, 0xE1F9, 0xE1FF, 0xE201, 0xE203, 0xE205, 0xE208, 0xF7B6, 0xF7B7, 0xF7B9, 0xF7BB, 0xF7BD, 0xF7BF, 0xE20B, 0xE20E, 0xF7C0, 0xF7C2, 0xF7C4, 0xF7C6, 0xF7C8, 0xF7CA, 0xE211, 0xE212, 0xE214, 0xE217, 0xF7CE, 0xF7CF, 0xF7D0, 0xF7D2, 0xE21A, 0xE21D, 0xF7D3, 0xF7D5, 0xF7D7, 0xF7D9, 0xF7DB, 0xE220, 0xE221, 0xE223, 0xE226, 0xF7DF, 0xF7E0, 0xF7E2, 0xF7E4, 0xE229, 0xE22C, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7EB, 0xF7ED, 
    0xE22F, 0xE230, 0xE232, 0xE235, 0xF7F1, 0xF7F2, 0xF7F3, 0xF7F5, 0xE238, 0xE23B, 0xF7F6, 0xF7F8, 0xF7FA, 0xF7FC, 0xF7FE, 0xF800, 0xE23E, 0xE23F, 0xE241, 0xE244, 0xF804, 0xF805, 0xF807, 0xF809, 0xE247, 0xE24A, 0xF80A, 0xF80C, 0xF80E, 0xF810, 0xF812, 0xF814, 0xE24D, 0xE24E, 0xE250, 0xE253, 0xF818, 0xF819, 0xF81A, 0xF81C, 0xE256, 0xE259, 0xF81D, 0xF81F, 0xF821, 0xF823, 0xF825, 0xE25C, 0xE25D, 0xE25F, 0xE262, 0xF829, 0xF82A, 0xF82C, 0xF82E, 0xE265, 0xE268, 0xF82F, 0xF831, 0xF833, 0xF835, 0xF837, 0xF839, 0xE26B, 0xE26C, 0xF83D, 0xF83E, 0xF840, 0xF842, 0xE26F, 0xE272, 0xF843, 0xF845, 0xF847, 0xF849, 0xF84B, 0xF84D, 0xE275, 0xE276, 0xE278, 0xE27B, 0xF851, 0xF852, 0xF853, 0xF855, 0xE27E, 0xE281, 0xF856, 0xF858, 0xF85A, 0xF85C, 0xF85E, 0xF860, 0xE284, 0xE285, 0xE287, 0xE28A, 0xF864, 0xF865, 0xF867, 0xF869, 0xE28D, 0xE290, 0xF86A, 0xF86C, 0xF86E, 0xF870, 0xF872, 0xF874, 
    0xE293, 0xE294, 0xF878, 0xF879, 0xF87A, 0xF87C, 0xE297, 0xE29A, 0xF87D, 0xF87F, 0xF881, 0xF883, 0xF885, 0xE29D, 0xE29E, 0xE2A0, 0xE2A3, 0xF889, 0xF88B, 0xF88D, 0xE2A6, 0xE2A9, 0xF88E, 0xF890, 0xF892, 0xF894, 0xF896, 0xE2AC, 0xE2AD, 0xE2AE, 0xE2B0, 0xE2B3, 0xE2B4, 0xF89A, 0xF89B, 0xE2B7, 0xE2BA, 0xF89C, 0xF89E, 0xF8A0, 0xF8A2, 0xF8A4, 0xE2BD, 0xE2BE, 0xE2BF, 0xE2C1, 0xE2C4, 0xE2C5, 0xE2C8, 0xF8A8, 0xF8AA, 0xF8AC, 0xF8AE, 0xE2CB, 0xE2CC, 0xE2CD, 0xE2CF, 0xE2D2, 0xE2D3, 0xF8B2, 0xF8B4, 0xE2D6, 0xE2D9, 0xF8B5, 0xF8B7, 0xF8B9, 0xF8BB, 0xE2DC, 0xE2DD, 0xE2DE, 0xE2E0, 0xE2E3, 0xE2E4, 0xE2E7, 0xF8BF, 0xF8C1, 0xF8C3, 0xF8C5, 0xE2EA, 0xE2EB, 0xE2EC, 0xE2EE, 0xE2F1, 0xE2F2, 0xE2F5, 0xF8C9, 0xF8CB, 0xF8CD, 0xF8CF, 0xE2F8, 0xE2F9, 0xE2FA, 0xE2FC, 0xE2FF, 0xE300, 0xE303, 0xF8D3, 0xF8D5, 0xF8D7, 0xF8D9, 0xE306, 0xE307, 0xE309, 0xE30C, 0xF931, 0xF933, 0xF935, 0xF936, 0xE30F, 
    0xE312, 0xF937, 0xF939, 0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xE315, 0xE316, 0xE318, 0xE31B, 0xF947, 0xF948, 0xF949, 0xF94B, 0xE31E, 0xE321, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xE324, 0xE325, 0xE327, 0xE32A, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xE32D, 0xE330, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xE333, 0xE334, 0xE336, 0xE339, 0xF972, 0xF973, 0xF975, 0xE33C, 0xE33F, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xE342, 0xE343, 0xE345, 0xE348, 0xF980, 0xF981, 0xF983, 0xE34B, 0xE34E, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xE351, 0xE353, 0xE356, 0xE358, 0xE35B, 0xE35D, 0xE35F, 0xE361, 0xE362, 0xE364, 0xE367, 0xE369, 0xE36B, 0xE36D, 0xE36F, 0xE371, 0xE373, 0xE375, 0xE377, 0xE379, 0xE37F, 0xE381, 0xE383, 0xE384, 0xE385, 0xE387, 0xE38A, 0xE38C, 0xE38E, 0xE390, 0xE392, 0xE394, 0xE396, 0xE398, 0xE39A, 0xE39C, 0xE3A2, 0xE3A4, 0xE3A5, 0xE3A7, 
    0xE3A9, 0xE3AC, 0xE3AF, 0xE3B1, 0xE3B3, 0xE3B5, 0xE3B7, 0xE3B8, 0xE3B9, 0xE3BB, 0xE3BD, 0xE3C0, 0xE3C3, 0xE3C5, 0xE3C7, 0xE3C9, 0xE3CF, 0xE3D1, 0xE3D3, 0xF990, 0xF992, 0xF994, 0xF996, 0xF997, 0xF999, 0xF99A, 0xF99C, 0xE3D6, 0xE3D9, 0xE3DC, 0xE3DF, 0xF99D, 0xF99F, 0xF9A1, 0xF9A3, 0xF9A5, 0xF9A7, 0xF9A9, 0xF9AA, 0xF9AC, 0xE3E2, 0xE3E3, 0xE3E6, 0xE3E9, 0xE3EC, 0xF9AD, 0xF9AF, 0xF9B1, 0xF9B3, 0xF9B5, 0xF9B7, 0xF9B9, 0xE3EF, 0xE3F0, 0xF9BD, 0xF9BF, 0xF9C0, 0xF9C2, 0xE3F3, 0xE3F6, 0xE3F9, 0xE3FC, 0xF9C3, 0xF9C5, 0xF9C7, 0xF9C9, 0xF9CB, 0xF9CD, 0xF9CF, 0xF9D0, 0xF9D2, 0xF9D3, 0xE3FF, 0xE400, 0xE403, 0xE406, 0xE409, 0xF9D4, 0xF9D6, 0xF9D8, 0xF9DA, 0xF9DC, 0xF9DE, 0xF9E0, 0xE40C, 0xE40D, 0xF9E4, 0xF9E6, 0xF9E7, 0xF9E9, 0xE410, 0xE413, 0xE416, 0xE419, 0xF9EA, 0xF9EC, 0xF9EE, 0xF9F0, 0xF9F2, 0xF9F4, 0xF9F6, 0xF9F7, 0xF9F8, 0xF9FA, 0xE41C, 0xE41D, 0xE420, 0xE423, 0xE426, 
    0xF9FB, 0xF9FD, 0xF9FF, 0xFA01, 0xFA03, 0xFA05, 0xFA07, 0xE429, 0xE42A, 0xFA0A, 0xFA0C, 0xFA0D, 0xFA0F, 0xE42D, 0xE430, 0xE433, 0xE436, 0xFA10, 0xFA12, 0xFA14, 0xFA16, 0xFA18, 0xFA1A, 0xFA1C, 0xFA1D, 0xFA1E, 0xFA20, 0xE439, 0xE43A, 0xE43D, 0xE440, 0xE443, 0xFA21, 0xFA23, 0xFA25, 0xFA27, 0xFA29, 0xFA2B, 0xFA2D, 0xE446, 0xE448, 0xE44B, 0xE44D, 0xE44F, 0xE450, 0xE453, 0xE455, 0xE457, 0xE459, 0xE45B, 0xE45E, 0xE460, 0xE466, 0xE468, 0xE46B, 0xE46C, 0xE46D, 0xE470, 0xE472, 0xE474, 0xE476, 0xE478, 0xE47B, 0xE47D, 0xE483, 0xE485, 0xE488, 0xE48A, 0xE48B, 0xE48E, 0xE490, 0xE492, 0xE494, 0xE496, 0xE499, 0xE49B, 0xE4A1, 0xE4A3, 0xE4A6, 0xE4A7, 0xE4A8, 0xE4AB, 0xE4AD, 0xE4AF, 0xE4B1, 0xE4B3, 0xE4B6, 0xE4B8, 0xE4BE, 0xE4C0, 0xE4C3, 0xE4C6, 0xE4CC, 0xE4CE, 0xE4D1, 0xE4D3, 0xE4D5, 0xE4D7, 0xE4D8, 0xE4DA, 0xE4DD, 0xE4DF, 0xE4E1, 0xE4E3, 0xE4E5, 0xE4E7, 0xE4E9, 0xE4EB, 0xE4ED, 
    0xE4EF, 0xE4F5, 0xE4F7, 0xE4FA, 0xE4FC, 0xE4FE, 0xE500, 0xE501, 0xE502, 0xE505, 0xE507, 0xE509, 0xE50B, 0xE50D, 0xE50F, 0xE511, 0xE513, 0xE515, 0xE517, 0xE51D, 0xC62F, 0xC6A3, 0xC6A5, 0xC6A7, 0xC6A9, 0xC6B0, 0xC6B2, 0xC6B3, 0xC6B5, 0xC6BC, 0xC6BD, 0xC6BF, 0xC6C1, 0xC6C3, 0xC6C4, 0xC6C5, 0xC6C6, 0xC6C7, 0xC6C8, 0xC6C9, 0xC6CC, 0xC6CD, 0xC6CE, 0xC6CF, 0xC6D0, 0xC6D1, 0xC6D2, 0xC6D4, 0xC6D6, 0xC6D8, 0xC6DA, 0xC6DC, 0xC6DE, 0xC6DF, 0xC6E0, 0xC6E1, 0xC6E2, 0xC6E3, 0xC6E4, 0xC6E5, 0xC6E6, 0xC6E7, 0xC6E8, 0xC6E9, 0xC6EA, 0xC6EC, 0xC6ED, 0xC6EE, 0xC6EF, 0xC6F0, 0xC6F1, 0xC6F2, 0xC6F5, 0xC6F8, 0xC6FB, 0xC6FE, 0xC701, 0xC704, 0xC705, 0xC706, 0xC707, 0xC708, 0xC709, 0xC70A, 0xC70C, 0xC70D, 0xC70F, 0xC711, 0xC713, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC722, 0xC724, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC711, 0xC713, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC722, 0xC724, 
    0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC711, 0xC713, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC722, 0xC724, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC711, 0xC713, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC722, 0xC724, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC711, 0xC713, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC722, 0xC724, 0xC728, 0xC729, 0xC72A, 0xC72C, 0xC6AC, 0xC6B7, 0xC6B9, 0xC6BA, 0xC6BC, 0xC6BD, 0xC6BF, 0xC6C1, 0xC6C3, 0xC6C4, 0xC6C5, 0xC6C6, 0xC6C7, 0xC6C8, 0xC6C9, 0xC6CC, 0xC6CD, 0xC6CE, 0xC6CF, 0xC6D0, 0xC6D1, 0xC6D2, 0xC6D4, 0xC6D6, 0xC6D8, 0xC6DA, 0xC6DC, 0xC6DE, 0xC6DF, 0xC6E0, 0xC6E1, 0xC6E2, 0xC6E3, 0xC6E4, 0xC6E5, 0xC6E6, 0xC6E7, 0xC6E8, 0xC6E9, 0xC6EA, 0xC6EC, 0xC6ED, 0xC6EE, 0xC6EF, 0xC6F0, 0xC6F1, 0xC6F2, 0xC6F5, 0xC6F8, 0xC6FB, 0xC6FE, 0xC701, 0xC704, 0xC705, 0xC706, 0xC707, 0xC708, 0xC709, 0xC70A, 0xC70C, 0xC70D, 0xC70F, 0xC71B, 
    0xC71C, 0xC71E, 0xC720, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC728, 0xC729, 0xC72A, 0xC70C, 0xC70D, 0xC70F, 0xC71B, 0xC71C, 0xC71E, 0xC720, 0xC728, 0xC729, 0xC72A, 0xC72C, 0xC6AF, 0xC632, 0xE51E, 0xE520, 0xE523, 0xE525, 0xE528, 0xE52A, 0xE52C, 0xE52E, 0xE530, 0xE532, 0xE534, 0xE536, 0xE538, 0xE53A, 0xE53C, 0xE53E, 0xE540, 0xE542, 0xE543, 0xE545, 0xE547, 0xE548, 0xE549, 0xE54A, 0xE54B, 0xE54D, 0xE54F, 0xE551, 0xE553, 0xE555, 0xE557, 0xE559, 0xE55B, 0xE55D, 0xE563, 0xE565, 0xE567, 0xE568, 0xE569, 0xE56B, 0xE56D, 0xE56E, 0xE56F, 0xE570, 0xE571, 0xE573, 0xE575, 0xE577, 0xE579, 0xE57B, 0xE57D, 0xE57F, 0xE581, 0xE583, 0xE589, 0xE58B, 0xE58D, 0xE58F, 0xE591, 0xE593, 
    0xE595, 0xE596, 0xE598, 0xE59A, 0xE59B, 0xE59C, 0xE59D, 0xE59E, 0xE5A0, 0xE5A2, 0xE5A4, 0xE5A6, 0xE5A8, 0xE5AA, 0xE5AC, 0xE5AE, 0xE5B0, 0xE5B6, 0xE5B8, 0xE5B9, 0xE5BA, 0xE5BC, 0xE5BE, 0xE5BF, 0xE5C0, 0xE5C1, 0xE5C2, 0xE5C4, 0xE5C6, 0xE5C8, 0xE5CA, 0xE5CC, 0xE5CE, 0xE5D0, 0xE5D2, 0xE5D4, 0xE5DA, 0xE5DC, 0xE5DF, 0xE5E1, 0xE5E4, 0xE5E6, 0xE5E8, 0xE5E9, 0xE5EB, 0xE5EE, 0xE5EF, 0xE5F0, 0xE5F1, 0xE5F2, 0xE5F4, 0xE5F6, 0xE5F8, 0xE5FA, 0xE5FC, 0xE5FE, 0xE600, 0xE602, 0xE604, 0xE60A, 0xE60C, 0xE60D, 0xE60E, 0xE610, 0xE613, 0xE614, 0xE615, 0xE616, 0xE617, 0xE619, 0xE61B, 0xE61D, 0xE61F, 0xE621, 0xE623, 0xE625, 0xE627, 0xE629, 0xE62F, 0xE631, 0xE633, 0xE635, 0xE637, 0xE639, 0xE63B, 0xE63D, 0xE63F, 0xE641, 0xE644, 0xE646, 0xE649, 0xE64B, 0xE64D, 0xE64F, 0xE650, 0xE652, 0xE654, 0xE655, 0xE656, 0xE657, 0xE658, 0xE65A, 0xE65C, 0xE65E, 0xE660, 0xE662, 0xE664, 0xE666, 0xE668, 
    0xE66A, 0xE670, 0xE672, 0xE674, 0xE675, 0xE676, 0xE678, 0xE67A, 0xE67B, 0xE67C, 0xE67D, 0xE67E, 0xE680, 0xE682, 0xE684, 0xE686, 0xE688, 0xE68A, 0xE68C, 0xE68E, 0xE690, 0xE696, 0xE698, 0xE69A, 0xE69C, 0xE69E, 0xE6A0, 0xE6A2, 0xE6A3, 0xE6A5, 0xE6A7, 0xE6A8, 0xE6A9, 0xE6AA, 0xE6AB, 0xE6AD, 0xE6AF, 0xE6B1, 0xE6B3, 0xE6B5, 0xE6B7, 0xE6B9, 0xE6BB, 0xE6BD, 0xE6C3, 0xE6C5, 0xE6C6, 0xE6C7, 0xE6C9, 0xE6CB, 0xE6CC, 0xE6CD, 0xE6CE, 0xE6CF, 0xE6D1, 0xE6D3, 0xE6D5, 0xE6D7, 0xE6D9, 0xE6DB, 0xE6DD, 0xE6DF, 0xE6E1, 0xE6E7, 0xE6E9, 0xE6EC, 0xE6EE, 0xE6F1, 0xE6F3, 0xE6F5, 0xE6F6, 0xE6F8, 0xE6FB, 0xE6FC, 0xE6FD, 0xE6FE, 0xE6FF, 0xE701, 0xE703, 0xE705, 0xE707, 0xE709, 0xE70B, 0xE70D, 0xE70F, 0xE711, 0xE717, 0xE719, 0xE71A, 0xE71B, 0xE71D, 0xE720, 0xE721, 0xE722, 0xE723, 0xE724, 0xE726, 0xE728, 0xE72A, 0xE72C, 0xE72E, 0xE730, 0xE732, 0xE734, 0xE736, 0xE73C, 0xC635, 0xE73D, 0xE73F, 
    0xE741, 0xE743, 0xE746, 0xE748, 0xE74A, 0xE74C, 0xE74E, 0xE750, 0xE752, 0xE754, 0xE756, 0xE757, 0xE759, 0xE75A, 0xE75B, 0xE75C, 0xE75D, 0xE75F, 0xE761, 0xE763, 0xE765, 0xE767, 0xE769, 0xE76B, 0xE76D, 0xE76F, 0xE771, 0xE774, 0xE776, 0xE77C, 0xE77E, 0xE780, 0xE782, 0xE783, 0xE784, 0xE786, 0xE787, 0xE788, 0xE789, 0xE78A, 0xE78C, 0xE78E, 0xE790, 0xE792, 0xE794, 0xE796, 0xE798, 0xE79A, 0xE79C, 0xE79E, 0xE7A1, 0xE7A3, 0xE7A9, 0xE7AB, 0xE7AD, 0xE7AF, 0xE7B1, 0xE7B3, 0xE7B5, 0xE7B6, 0xE7B8, 0xE7B9, 0xE7BA, 0xE7BB, 0xE7BC, 0xE7BE, 0xE7C0, 0xE7C2, 0xE7C4, 0xE7C6, 0xE7C8, 0xE7CA, 0xE7CC, 0xE7CE, 0xE7D0, 0xE7D2, 0xE7D4, 0xE7DA, 0xE7DC, 0xE7DE, 0xE7E0, 0xE7E2, 0xE7E4, 0xE7E5, 0xE7E6, 0xE7E8, 0xE7E9, 0xE7EA, 0xE7EB, 0xE7EC, 0xE7EE, 0xE7F0, 0xE7F2, 0xE7F4, 0xE7F6, 0xE7F8, 0xE7FA, 0xE7FC, 0xE7FE, 0xE800, 0xE802, 0xE804, 0xE80A, 0xE80C, 0xE80F, 0xE811, 0xE813, 0xE815, 0xE817, 
    0xE818, 0xE81B, 0xE81C, 0xE81D, 0xE81E, 0xE81F, 0xE821, 0xE823, 0xE825, 0xE827, 0xE829, 0xE82B, 0xE82D, 0xE82F, 0xE831, 0xE833, 0xE836, 0xE838, 0xE83E, 0xE840, 0xE843, 0xE845, 0xE847, 0xE849, 0xE84A, 0xE84B, 0xE84E, 0xE84F, 0xE850, 0xE851, 0xE852, 0xE854, 0xE856, 0xE858, 0xE85A, 0xE85C, 0xE85E, 0xE860, 0xE862, 0xE864, 0xE866, 0xE869, 0xE86B, 0xE871, 0xE873, 0xE875, 0xE877, 0xE879, 0xE87B, 0xE87D, 0xE87E, 0xE880, 0xE881, 0xE882, 0xE883, 0xE884, 0xE886, 0xE888, 0xE88A, 0xE88C, 0xE88E, 0xE890, 0xE892, 0xE894, 0xE896, 0xE898, 0xE89A, 0xE89C, 0xE8A2, 0xE8A4, 0xE8A6, 0xE8A8, 0xE8AA, 0xE8AC, 0xE8AD, 0xE8AE, 0xE8B0, 0xE8B1, 0xE8B2, 0xE8B3, 0xE8B4, 0xE8B6, 0xE8B8, 0xE8BA, 0xE8BC, 0xE8BE, 0xE8C0, 0xE8C2, 0xE8C4, 0xE8C6, 0xE8C8, 0xE8CA, 0xE8CC, 0xE8D2, 0xC638, 0xE8D3, 0xE8D5, 0xF931, 0xF933, 0xF935, 0xF936, 0xE8D8, 0xE8DA, 0xE8DB, 0xE8DC, 0xE8DD, 0xE8DE, 0xF937, 0xF939, 
    0xF93B, 0xF93D, 0xF93F, 0xF941, 0xF943, 0xE8E1, 0xE8E2, 0xF947, 0xF948, 0xF949, 0xF94B, 0xE8E5, 0xE8E7, 0xE8E8, 0xE8E9, 0xE8EA, 0xE8EB, 0xF94C, 0xF94E, 0xF950, 0xF952, 0xF954, 0xF956, 0xF958, 0xE8EE, 0xE8EF, 0xF95C, 0xF95E, 0xF95F, 0xF961, 0xE8F2, 0xE8F4, 0xE8F5, 0xE8F6, 0xE8F7, 0xE8F8, 0xF962, 0xF964, 0xF966, 0xF968, 0xF96A, 0xF96C, 0xF96E, 0xE8FB, 0xE8FC, 0xF972, 0xF973, 0xF975, 0xE8FF, 0xE901, 0xE902, 0xE903, 0xE904, 0xE905, 0xF976, 0xF978, 0xF97A, 0xF97C, 0xE908, 0xE909, 0xF980, 0xF981, 0xF983, 0xE90C, 0xE90E, 0xE90F, 0xE910, 0xE911, 0xE912, 0xF984, 0xF986, 0xF988, 0xF98A, 0xF98C, 0xE915, 0xC63B, 0xE916, 0xE918, 0xE91A, 0xE91C, 0xE91E, 0xE920, 0xE922, 0xE924, 0xE926, 0xE928, 0xE92B, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xE92E, 0xE930, 0xE931, 0xE932, 0xE933, 0xE934, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xE937, 0xE93A, 0xE93C, 0xE940, 0xE941, 0xE943, 
    0xE946, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xE949, 0xE94B, 0xE94C, 0xE94D, 0xE94E, 0xE94F, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xE952, 0xE955, 0xE957, 0xE95B, 0xE95C, 0xE95E, 0xE961, 0xFA54, 0xFA56, 0xFA58, 0xE964, 0xE966, 0xE967, 0xE968, 0xE969, 0xE96A, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xE96D, 0xE970, 0xE972, 0xE976, 0xE977, 0xE979, 0xE97B, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xE97E, 0xE980, 0xE981, 0xE982, 0xE983, 0xE984, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xE987, 0xE989, 0xE98B, 0xE98F, 0xE990, 0xE992, 0xE994, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xE997, 0xE999, 0xE99A, 0xE99B, 0xE99C, 0xE99D, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xE9A0, 0xE9A2, 0xE9A4, 0xE9A8, 0xE9A9, 0xE9AB, 0xE9AD, 0xFA54, 0xFA56, 0xFA58, 0xE9B0, 0xE9B2, 0xE9B3, 0xE9B4, 0xE9B5, 0xE9B6, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 
    0xFA63, 0xFA67, 0xE9B9, 0xE9BB, 0xE9BD, 0xE9C1, 0xE9C2, 0xE9C4, 0xE9C7, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xE9CA, 0xE9CD, 0xE9CE, 0xE9CF, 0xE9D0, 0xE9D1, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xE9D4, 0xE9D7, 0xE9D9, 0xE9DD, 0xE9DE, 0xE9E0, 0xE9E3, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xE9E6, 0xE9E9, 0xE9EA, 0xE9EB, 0xE9EC, 0xE9ED, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xE9F0, 0xE9F3, 0xE9F5, 0xE9F9, 0xE9FA, 0xE9FC, 0xE9FF, 0xFA54, 0xFA56, 0xFA58, 0xEA02, 0xEA05, 0xEA06, 0xEA07, 0xEA08, 0xEA09, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xEA0C, 0xEA0F, 0xEA11, 0xEA15, 0xEA17, 0xEA1A, 0xEA1C, 0xEA1E, 0xEA20, 0xEA22, 0xEA24, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xEA27, 0xEA29, 0xEA2A, 0xEA2B, 0xEA2C, 0xEA2D, 0xEA2F, 0xEA30, 0xEA31, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xEA34, 0xEA37, 0xEA39, 0xEA3D, 0xEA3F, 0xEA41, 0xEA44, 
    0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xEA47, 0xEA49, 0xEA4A, 0xEA4B, 0xEA4C, 0xEA4D, 0xEA4F, 0xEA50, 0xEA51, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xEA54, 0xEA57, 0xEA59, 0xEA5D, 0xEA5F, 0xEA61, 0xEA64, 0xFA54, 0xFA56, 0xFA58, 0xEA67, 0xEA69, 0xEA6A, 0xEA6B, 0xEA6C, 0xEA6D, 0xEA6F, 0xEA70, 0xEA71, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xEA74, 0xEA77, 0xEA79, 0xEA7D, 0xEA7F, 0xEA81, 0xEA83, 0xEA85, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xEA88, 0xEA8A, 0xEA8B, 0xEA8C, 0xEA8D, 0xEA8E, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xEA91, 0xEA93, 0xEA95, 0xEA99, 0xEA9A, 0xEA9C, 0xEA9E, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xEAA1, 0xEAA3, 0xEAA4, 0xEAA5, 0xEAA6, 0xEAA7, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xEAAA, 0xEAAC, 0xEAAE, 0xEAB2, 0xEAB3, 0xEAB5, 0xEAB7, 0xFA54, 0xFA56, 0xFA58, 0xEABA, 0xEABC, 0xEABD, 0xEABE, 0xEABF, 
    0xEAC0, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xEAC3, 0xEAC5, 0xEAC7, 0xEACB, 0xEACD, 0xEAD0, 0xEAD2, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xEAD5, 0xEAD8, 0xEAD9, 0xEADA, 0xEADB, 0xEADC, 0xEADE, 0xEADF, 0xEAE0, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 0xFA3F, 0xFA41, 0xEAE3, 0xEAE6, 0xEAE8, 0xEAEC, 0xEAEE, 0xEAF0, 0xEAF3, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xEAF6, 0xEAF9, 0xEAFA, 0xEAFB, 0xEAFC, 0xEAFD, 0xEAFF, 0xEB00, 0xEB01, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xEB04, 0xEB07, 0xEB09, 0xEB0D, 0xEB0F, 0xEB11, 0xEB14, 0xFA54, 0xFA56, 0xFA58, 0xEB17, 0xEB1A, 0xEB1B, 0xEB1C, 0xEB1D, 0xEB1E, 0xEB20, 0xEB21, 0xEB22, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xEB25, 0xEB28, 0xEB2A, 0xEB2E, 0xEB30, 0xEB32, 0xEB34, 0xEB37, 0xFA31, 0xFA33, 0xFA34, 0xFA36, 0xEB3A, 0xEB3D, 0xEB3E, 0xEB3F, 0xEB40, 0xEB41, 0xFA37, 0xFA39, 0xFA3B, 0xFA3D, 
    0xFA3F, 0xFA41, 0xEB44, 0xEB47, 0xEB49, 0xEB4D, 0xEB4E, 0xEB50, 0xEB53, 0xFA42, 0xFA43, 0xFA44, 0xFA46, 0xEB56, 0xEB59, 0xEB5A, 0xEB5B, 0xEB5C, 0xEB5D, 0xFA47, 0xFA49, 0xFA4B, 0xFA4D, 0xFA4F, 0xFA51, 0xFA53, 0xEB60, 0xEB63, 0xEB65, 0xEB69, 0xEB6A, 0xEB6C, 0xEB6F, 0xFA54, 0xFA56, 0xFA58, 0xEB72, 0xEB75, 0xEB76, 0xEB77, 0xEB78, 0xEB79, 0xFA59, 0xFA5B, 0xFA5D, 0xFA5F, 0xFA61, 0xFA63, 0xFA67, 0xEB7C, 0xEB7F, 0xEB81, 0xEB85, 0xC63E, 0xEB86, 0xEB88, 0xEB8A, 0xEB8C, 0xEB8E, 0xEB90, 0xEB92, 0xEB94, 0xEB96, 0xEB98, 0xEB9B, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xEB9E, 0xEBA0, 0xEBA1, 0xEBA2, 0xEBA3, 0xEBA4, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xEBA7, 0xEBAA, 0xEBAC, 0xEBB0, 0xEBB1, 0xEBB3, 0xEBB6, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xEBB9, 0xEBBB, 0xEBBC, 0xEBBD, 0xEBBE, 0xEBBF, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xEBC2, 0xEBC5, 0xEBC7, 0xEBCB, 
    0xEBCC, 0xEBCE, 0xEBD1, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xEBD4, 0xEBD6, 0xEBD7, 0xEBD8, 0xEBD9, 0xEBDA, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xEBDD, 0xEBE0, 0xEBE2, 0xEBE6, 0xEBE7, 0xEBE9, 0xEBEB, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xEBEE, 0xEBF0, 0xEBF1, 0xEBF2, 0xEBF3, 0xEBF4, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xEBF7, 0xEBF9, 0xEBFB, 0xEBFF, 0xEC00, 0xEC02, 0xEC04, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xEC07, 0xEC09, 0xEC0A, 0xEC0B, 0xEC0C, 0xEC0D, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xEC10, 0xEC12, 0xEC14, 0xEC18, 0xEC19, 0xEC1B, 0xEC1D, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xEC20, 0xEC22, 0xEC23, 0xEC24, 0xEC25, 0xEC26, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xEC29, 0xEC2B, 0xEC2D, 0xEC31, 0xEC32, 0xEC34, 0xEC37, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xEC3A, 0xEC3D, 0xEC3E, 0xEC3F, 0xEC40, 0xEC41, 0xFAB7, 
    0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xEC44, 0xEC47, 0xEC49, 0xEC4D, 0xEC4E, 0xEC50, 0xEC53, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xEC56, 0xEC59, 0xEC5A, 0xEC5B, 0xEC5C, 0xEC5D, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xEC60, 0xEC63, 0xEC65, 0xEC69, 0xEC6A, 0xEC6C, 0xEC6F, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xEC72, 0xEC75, 0xEC76, 0xEC77, 0xEC78, 0xEC79, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xEC7C, 0xEC7F, 0xEC81, 0xEC85, 0xEC87, 0xEC8A, 0xEC8C, 0xEC8E, 0xEC90, 0xEC92, 0xEC94, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xEC97, 0xEC99, 0xEC9A, 0xEC9B, 0xEC9C, 0xEC9D, 0xEC9F, 0xECA0, 0xECA1, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xECA4, 0xECA7, 0xECA9, 0xECAD, 0xECAF, 0xECB1, 0xECB4, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xECB7, 0xECB9, 0xECBA, 0xECBB, 0xECBC, 0xECBD, 0xECBF, 0xECC0, 0xECC1, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 
    0xFAD3, 0xECC4, 0xECC7, 0xECC9, 0xECCD, 0xECCF, 0xECD1, 0xECD4, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xECD7, 0xECD9, 0xECDA, 0xECDB, 0xECDC, 0xECDD, 0xECDF, 0xECE0, 0xECE1, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xECE4, 0xECE7, 0xECE9, 0xECED, 0xECEF, 0xECF1, 0xECF3, 0xECF5, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xECF8, 0xECFA, 0xECFB, 0xECFC, 0xECFD, 0xECFE, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xED01, 0xED03, 0xED05, 0xED09, 0xED0A, 0xED0C, 0xED0E, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xED11, 0xED13, 0xED14, 0xED15, 0xED16, 0xED17, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xED1A, 0xED1C, 0xED1E, 0xED22, 0xED23, 0xED25, 0xED27, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xED2A, 0xED2C, 0xED2D, 0xED2E, 0xED2F, 0xED30, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xED33, 0xED35, 0xED37, 0xED3B, 0xED3D, 0xED40, 0xED42, 0xFAB1, 0xFAB3, 
    0xFAB4, 0xFAB6, 0xED45, 0xED48, 0xED49, 0xED4A, 0xED4B, 0xED4C, 0xED4E, 0xED4F, 0xED50, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xED53, 0xED56, 0xED58, 0xED5C, 0xED5E, 0xED60, 0xED63, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xED66, 0xED69, 0xED6A, 0xED6B, 0xED6C, 0xED6D, 0xED6F, 0xED70, 0xED71, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xED74, 0xED77, 0xED79, 0xED7D, 0xED7F, 0xED81, 0xED84, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xED87, 0xED8A, 0xED8B, 0xED8C, 0xED8D, 0xED8E, 0xED90, 0xED91, 0xED92, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xED95, 0xED98, 0xED9A, 0xED9E, 0xEDA0, 0xEDA2, 0xEDA4, 0xEDA7, 0xFAB1, 0xFAB3, 0xFAB4, 0xFAB6, 0xEDAA, 0xEDAD, 0xEDAE, 0xEDAF, 0xEDB0, 0xEDB1, 0xFAB7, 0xFAB9, 0xFABB, 0xFABD, 0xFABF, 0xFAC1, 0xEDB4, 0xEDB7, 0xEDB9, 0xEDBD, 0xEDBE, 0xEDC0, 0xEDC3, 0xFAC2, 0xFAC3, 0xFAC4, 0xFAC6, 0xEDC6, 0xEDC9, 0xEDCA, 
    0xEDCB, 0xEDCC, 0xEDCD, 0xFAC7, 0xFAC9, 0xFACB, 0xFACD, 0xFACF, 0xFAD1, 0xFAD3, 0xEDD0, 0xEDD3, 0xEDD5, 0xEDD9, 0xEDDA, 0xEDDC, 0xEDDF, 0xFAD4, 0xFAD6, 0xFAD7, 0xFAD9, 0xEDE2, 0xEDE5, 0xEDE6, 0xEDE7, 0xEDE8, 0xEDE9, 0xFADA, 0xFADC, 0xFADE, 0xFAE0, 0xFAE2, 0xFAE4, 0xFAE8, 0xEDEC, 0xEDEF, 0xEDF1, 0xEDF5, 0xC641, 0xEDF6, 0xEDF8, 0xEDFA, 0xEDFC, 0xEDFE, 0xEE00, 0xEE02, 0xEE04, 0xEE06, 0xEE08, 0xEE0B, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEE0E, 0xEE10, 0xEE11, 0xEE12, 0xEE13, 0xEE14, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xEE17, 0xEE1A, 0xEE1C, 0xEE20, 0xEE21, 0xEE23, 0xEE26, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xEE29, 0xEE2B, 0xEE2C, 0xEE2D, 0xEE2E, 0xEE2F, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEE32, 0xEE35, 0xEE37, 0xEE3B, 0xEE3C, 0xEE3E, 0xEE41, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEE44, 0xEE46, 0xEE47, 0xEE48, 0xEE49, 0xEE4A, 0xFAA4, 0xFAA6, 
    0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xEE4D, 0xEE50, 0xEE52, 0xEE56, 0xEE57, 0xEE59, 0xEE5B, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEE5E, 0xEE60, 0xEE61, 0xEE62, 0xEE63, 0xEE64, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xEE67, 0xEE69, 0xEE6B, 0xEE6F, 0xEE70, 0xEE72, 0xEE74, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xEE77, 0xEE79, 0xEE7A, 0xEE7B, 0xEE7C, 0xEE7D, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEE80, 0xEE82, 0xEE84, 0xEE88, 0xEE89, 0xEE8B, 0xEE8D, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEE90, 0xEE92, 0xEE93, 0xEE94, 0xEE95, 0xEE96, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xEE99, 0xEE9B, 0xEE9D, 0xEEA1, 0xEEA2, 0xEEA4, 0xEEA7, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEEAA, 0xEEAD, 0xEEAE, 0xEEAF, 0xEEB0, 0xEEB1, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xEEB4, 0xEEB7, 0xEEB9, 0xEEBD, 0xEEBE, 0xEEC0, 0xEEC3, 0xFA8C, 0xFA8D, 0xFA8E, 
    0xFA90, 0xEEC6, 0xEEC9, 0xEECA, 0xEECB, 0xEECC, 0xEECD, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEED0, 0xEED3, 0xEED5, 0xEED9, 0xEEDA, 0xEEDC, 0xEEDF, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEEE2, 0xEEE5, 0xEEE6, 0xEEE7, 0xEEE8, 0xEEE9, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xEEEC, 0xEEEF, 0xEEF1, 0xEEF5, 0xEEF7, 0xEEFA, 0xEEFC, 0xEEFE, 0xEF00, 0xEF02, 0xEF04, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEF07, 0xEF09, 0xEF0A, 0xEF0B, 0xEF0C, 0xEF0D, 0xEF0F, 0xEF10, 0xEF11, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xEF14, 0xEF17, 0xEF19, 0xEF1D, 0xEF1F, 0xEF21, 0xEF24, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xEF27, 0xEF29, 0xEF2A, 0xEF2B, 0xEF2C, 0xEF2D, 0xEF2F, 0xEF30, 0xEF31, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEF34, 0xEF37, 0xEF39, 0xEF3D, 0xEF3F, 0xEF41, 0xEF44, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEF47, 0xEF49, 0xEF4A, 
    0xEF4B, 0xEF4C, 0xEF4D, 0xEF4F, 0xEF50, 0xEF51, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xEF54, 0xEF57, 0xEF59, 0xEF5D, 0xEF5F, 0xEF61, 0xEF63, 0xEF65, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEF68, 0xEF6A, 0xEF6B, 0xEF6C, 0xEF6D, 0xEF6E, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xEF71, 0xEF73, 0xEF75, 0xEF79, 0xEF7A, 0xEF7C, 0xEF7E, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xEF81, 0xEF83, 0xEF84, 0xEF85, 0xEF86, 0xEF87, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEF8A, 0xEF8C, 0xEF8E, 0xEF92, 0xEF93, 0xEF95, 0xEF97, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEF9A, 0xEF9C, 0xEF9D, 0xEF9E, 0xEF9F, 0xEFA0, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xEFA3, 0xEFA5, 0xEFA7, 0xEFAB, 0xEFAD, 0xEFB0, 0xEFB2, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xEFB5, 0xEFB8, 0xEFB9, 0xEFBA, 0xEFBB, 0xEFBC, 0xEFBE, 0xEFBF, 0xEFC0, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 
    0xFA89, 0xFA8B, 0xEFC3, 0xEFC6, 0xEFC8, 0xEFCC, 0xEFCE, 0xEFD0, 0xEFD3, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xEFD6, 0xEFD9, 0xEFDA, 0xEFDB, 0xEFDC, 0xEFDD, 0xEFDF, 0xEFE0, 0xEFE1, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xEFE4, 0xEFE7, 0xEFE9, 0xEFED, 0xEFEF, 0xEFF1, 0xEFF4, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xEFF7, 0xEFFA, 0xEFFB, 0xEFFC, 0xEFFD, 0xEFFE, 0xF000, 0xF001, 0xF002, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xF005, 0xF008, 0xF00A, 0xF00E, 0xF010, 0xF012, 0xF014, 0xF017, 0xFA7B, 0xFA7D, 0xFA7E, 0xFA80, 0xF01A, 0xF01D, 0xF01E, 0xF01F, 0xF020, 0xF021, 0xFA81, 0xFA83, 0xFA85, 0xFA87, 0xFA89, 0xFA8B, 0xF024, 0xF027, 0xF029, 0xF02D, 0xF02E, 0xF030, 0xF033, 0xFA8C, 0xFA8D, 0xFA8E, 0xFA90, 0xF036, 0xF039, 0xF03A, 0xF03B, 0xF03C, 0xF03D, 0xFA91, 0xFA93, 0xFA95, 0xFA97, 0xFA99, 0xFA9B, 0xFA9D, 0xF040, 0xF043, 0xF045, 0xF049, 0xF04A, 
    0xF04C, 0xF04F, 0xFA9E, 0xFAA0, 0xFAA1, 0xFAA3, 0xF052, 0xF055, 0xF056, 0xF057, 0xF058, 0xF059, 0xFAA4, 0xFAA6, 0xFAA8, 0xFAAA, 0xFAAC, 0xFAAE, 0xFAB0, 0xF05C, 0xF05F, 0xF061, 0xF065, 0xC644, 0xF066, 0xF068, 0xF06A, 0xF06C, 0xF06E, 0xF070, 0xF072, 0xF074, 0xF076, 0xF078, 0xF07B, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF07E, 0xF080, 0xF081, 0xF082, 0xF083, 0xF084, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF087, 0xF08A, 0xF08C, 0xF090, 0xF091, 0xF093, 0xF096, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF099, 0xF09B, 0xF09C, 0xF09D, 0xF09E, 0xF09F, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF0A2, 0xF0A5, 0xF0A7, 0xF0AB, 0xF0AC, 0xF0AE, 0xF0B1, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF0B4, 0xF0B6, 0xF0B7, 0xF0B8, 0xF0B9, 0xF0BA, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF0BD, 0xF0C0, 0xF0C2, 0xF0C6, 0xF0C7, 0xF0C9, 0xF0CB, 0xFB53, 0xFB55, 0xFB56, 
    0xFB58, 0xF0CE, 0xF0D0, 0xF0D1, 0xF0D2, 0xF0D3, 0xF0D4, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF0D7, 0xF0D9, 0xF0DB, 0xF0DF, 0xF0E0, 0xF0E2, 0xF0E4, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF0E7, 0xF0E9, 0xF0EA, 0xF0EB, 0xF0EC, 0xF0ED, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF0F0, 0xF0F2, 0xF0F4, 0xF0F8, 0xF0F9, 0xF0FB, 0xF0FD, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF100, 0xF102, 0xF103, 0xF104, 0xF105, 0xF106, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF109, 0xF10B, 0xF10D, 0xF111, 0xF112, 0xF114, 0xF117, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF11A, 0xF11D, 0xF11E, 0xF11F, 0xF120, 0xF121, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF124, 0xF127, 0xF129, 0xF12D, 0xF12E, 0xF130, 0xF133, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF136, 0xF139, 0xF13A, 0xF13B, 0xF13C, 0xF13D, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF140, 
    0xF143, 0xF145, 0xF149, 0xF14A, 0xF14C, 0xF14F, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF152, 0xF155, 0xF156, 0xF157, 0xF158, 0xF159, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF15C, 0xF15F, 0xF161, 0xF165, 0xF167, 0xF16A, 0xF16C, 0xF16E, 0xF170, 0xF172, 0xF174, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF177, 0xF179, 0xF17A, 0xF17B, 0xF17C, 0xF17D, 0xF17F, 0xF180, 0xF181, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF184, 0xF187, 0xF189, 0xF18D, 0xF18F, 0xF191, 0xF194, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF197, 0xF199, 0xF19A, 0xF19B, 0xF19C, 0xF19D, 0xF19F, 0xF1A0, 0xF1A1, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF1A4, 0xF1A7, 0xF1A9, 0xF1AD, 0xF1AF, 0xF1B1, 0xF1B4, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF1B7, 0xF1B9, 0xF1BA, 0xF1BB, 0xF1BC, 0xF1BD, 0xF1BF, 0xF1C0, 0xF1C1, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF1C4, 0xF1C7, 
    0xF1C9, 0xF1CD, 0xF1CF, 0xF1D1, 0xF1D3, 0xF1D5, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF1D8, 0xF1DA, 0xF1DB, 0xF1DC, 0xF1DD, 0xF1DE, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF1E1, 0xF1E3, 0xF1E5, 0xF1E9, 0xF1EA, 0xF1EC, 0xF1EE, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF1F1, 0xF1F3, 0xF1F4, 0xF1F5, 0xF1F6, 0xF1F7, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF1FA, 0xF1FC, 0xF1FE, 0xF202, 0xF203, 0xF205, 0xF207, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF20A, 0xF20C, 0xF20D, 0xF20E, 0xF20F, 0xF210, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF213, 0xF215, 0xF217, 0xF21B, 0xF21D, 0xF220, 0xF222, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF225, 0xF228, 0xF229, 0xF22A, 0xF22B, 0xF22C, 0xF22E, 0xF22F, 0xF230, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF233, 0xF236, 0xF238, 0xF23C, 0xF23E, 0xF240, 0xF243, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF246, 0xF249, 
    0xF24A, 0xF24B, 0xF24C, 0xF24D, 0xF24F, 0xF250, 0xF251, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF254, 0xF257, 0xF259, 0xF25D, 0xF25F, 0xF261, 0xF264, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF267, 0xF26A, 0xF26B, 0xF26C, 0xF26D, 0xF26E, 0xF270, 0xF271, 0xF272, 0xFA6E, 0xFA70, 0xFA72, 0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF275, 0xF278, 0xF27A, 0xF27E, 0xF280, 0xF282, 0xF284, 0xF287, 0xFB53, 0xFB55, 0xFB56, 0xFB58, 0xF28A, 0xF28D, 0xF28E, 0xF28F, 0xF290, 0xF291, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB63, 0xF294, 0xF297, 0xF299, 0xF29D, 0xF29E, 0xF2A0, 0xF2A3, 0xFB64, 0xFB65, 0xFB66, 0xFB68, 0xF2A6, 0xF2A9, 0xF2AA, 0xF2AB, 0xF2AC, 0xF2AD, 0xFB69, 0xFB6B, 0xFB6D, 0xFB6F, 0xFB71, 0xFB73, 0xFB77, 0xF2B0, 0xF2B3, 0xF2B5, 0xF2B9, 0xF2BA, 0xF2BC, 0xF2BF, 0xFA68, 0xFA6A, 0xFA6B, 0xFA6D, 0xF2C2, 0xF2C5, 0xF2C6, 0xF2C7, 0xF2C8, 0xF2C9, 0xFA6E, 0xFA70, 0xFA72, 
    0xFA74, 0xFA76, 0xFA78, 0xFA7A, 0xF2CC, 0xF2CF, 0xF2D1, 0xF2D5, 0xC647, 0xF2D6, 0xF2D8, 0xF2DA, 0xF2DC, 0xF2DE, 0xF2E0, 0xF2E2, 0xF2E4, 0xF2E6, 0xF2E8, 0xF2EB, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF2EE, 0xF2F0, 0xF2F1, 0xF2F2, 0xF2F3, 0xF2F4, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF2F7, 0xF2FA, 0xF2FC, 0xF300, 0xF301, 0xF303, 0xF306, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF309, 0xF30B, 0xF30C, 0xF30D, 0xF30E, 0xF30F, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF312, 0xF315, 0xF317, 0xF31B, 0xF31C, 0xF31E, 0xF321, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF324, 0xF326, 0xF327, 0xF328, 0xF329, 0xF32A, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF32D, 0xF330, 0xF332, 0xF336, 0xF337, 0xF339, 0xF33B, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF33E, 0xF340, 0xF341, 0xF342, 0xF343, 0xF344, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF347, 0xF349, 
    0xF34B, 0xF34F, 0xF350, 0xF352, 0xF354, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF357, 0xF359, 0xF35A, 0xF35B, 0xF35C, 0xF35D, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF360, 0xF362, 0xF364, 0xF368, 0xF369, 0xF36B, 0xF36D, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF370, 0xF372, 0xF373, 0xF374, 0xF375, 0xF376, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF379, 0xF37B, 0xF37D, 0xF381, 0xF382, 0xF384, 0xF387, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF38A, 0xF38D, 0xF38E, 0xF38F, 0xF390, 0xF391, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF394, 0xF397, 0xF399, 0xF39D, 0xF39E, 0xF3A0, 0xF3A3, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF3A6, 0xF3A9, 0xF3AA, 0xF3AB, 0xF3AC, 0xF3AD, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF3B0, 0xF3B3, 0xF3B5, 0xF3B9, 0xF3BA, 0xF3BC, 0xF3BF, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF3C2, 0xF3C5, 0xF3C6, 0xF3C7, 0xF3C8, 
    0xF3C9, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF3CC, 0xF3CF, 0xF3D1, 0xF3D5, 0xF3D7, 0xF3DA, 0xF3DC, 0xF3DE, 0xF3E0, 0xF3E2, 0xF3E4, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF3E7, 0xF3E9, 0xF3EA, 0xF3EB, 0xF3EC, 0xF3ED, 0xF3EF, 0xF3F0, 0xF3F1, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF3F4, 0xF3F7, 0xF3F9, 0xF3FD, 0xF3FF, 0xF401, 0xF404, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF407, 0xF409, 0xF40A, 0xF40B, 0xF40C, 0xF40D, 0xF40F, 0xF410, 0xF411, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF414, 0xF417, 0xF419, 0xF41D, 0xF41F, 0xF421, 0xF424, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF427, 0xF429, 0xF42A, 0xF42B, 0xF42C, 0xF42D, 0xF42F, 0xF430, 0xF431, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF434, 0xF437, 0xF439, 0xF43D, 0xF43F, 0xF441, 0xF443, 0xF445, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF448, 0xF44A, 0xF44B, 0xF44C, 0xF44D, 
    0xF44E, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF451, 0xF453, 0xF455, 0xF459, 0xF45A, 0xF45C, 0xF45E, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF461, 0xF463, 0xF464, 0xF465, 0xF466, 0xF467, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF46A, 0xF46C, 0xF46E, 0xF472, 0xF473, 0xF475, 0xF477, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF47A, 0xF47C, 0xF47D, 0xF47E, 0xF47F, 0xF480, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF483, 0xF485, 0xF487, 0xF48B, 0xF48D, 0xF490, 0xF492, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF495, 0xF498, 0xF499, 0xF49A, 0xF49B, 0xF49C, 0xF49E, 0xF49F, 0xF4A0, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF4A3, 0xF4A6, 0xF4A8, 0xF4AC, 0xF4AE, 0xF4B0, 0xF4B3, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF4B6, 0xF4B9, 0xF4BA, 0xF4BB, 0xF4BC, 0xF4BD, 0xF4BF, 0xF4C0, 0xF4C1, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF4C4, 
    0xF4C7, 0xF4C9, 0xF4CD, 0xF4CF, 0xF4D1, 0xF4D4, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF4D7, 0xF4DA, 0xF4DB, 0xF4DC, 0xF4DD, 0xF4DE, 0xF4E0, 0xF4E1, 0xF4E2, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF4E5, 0xF4E8, 0xF4EA, 0xF4EE, 0xF4F0, 0xF4F2, 0xF4F4, 0xF4F7, 0xFB1D, 0xFB1F, 0xFB20, 0xFB22, 0xF4FA, 0xF4FD, 0xF4FE, 0xF4FF, 0xF500, 0xF501, 0xFB23, 0xFB25, 0xFB27, 0xFB29, 0xFB2B, 0xFB2D, 0xF504, 0xF507, 0xF509, 0xF50D, 0xF50E, 0xF510, 0xF513, 0xFB2E, 0xFB2F, 0xFB30, 0xFB32, 0xF516, 0xF519, 0xF51A, 0xF51B, 0xF51C, 0xF51D, 0xFB33, 0xFB35, 0xFB37, 0xFB39, 0xFB3B, 0xFB3D, 0xFB3F, 0xF520, 0xF523, 0xF525, 0xF529, 0xF52A, 0xF52C, 0xF52F, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xF532, 0xF535, 0xF536, 0xF537, 0xF538, 0xF539, 0xFB46, 0xFB48, 0xFB4A, 0xFB4C, 0xFB4E, 0xFB50, 0xFB52, 0xF53C, 0xF53F, 0xF541, 0xF545, 0xC64A, 0xC64C, 0xC64E, 0xC650, 0xC652, 0xF546, 0xF548, 
    0xF54A, 0xF54C, 0xF54E, 0xF550, 0xF552, 0xF554, 0xF556, 0xF558, 0xF55B, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF55E, 0xF560, 0xF561, 0xF562, 0xF563, 0xF564, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF567, 0xF56A, 0xF56C, 0xF570, 0xF571, 0xF573, 0xF576, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF579, 0xF57B, 0xF57C, 0xF57D, 0xF57E, 0xF57F, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF582, 0xF585, 0xF587, 0xF58B, 0xF58C, 0xF58E, 0xF591, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF594, 0xF596, 0xF597, 0xF598, 0xF599, 0xF59A, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF59D, 0xF5A0, 0xF5A2, 0xF5A6, 0xF5A7, 0xF5A9, 0xF5AB, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF5AE, 0xF5B0, 0xF5B1, 0xF5B2, 0xF5B3, 0xF5B4, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF5B7, 0xF5B9, 0xF5BB, 0xF5BF, 0xF5C0, 0xF5C2, 0xF5C4, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF5C7, 0xF5C9, 0xF5CA, 0xF5CB, 
    0xF5CC, 0xF5CD, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF5D0, 0xF5D2, 0xF5D4, 0xF5D8, 0xF5D9, 0xF5DB, 0xF5DD, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF5E0, 0xF5E2, 0xF5E3, 0xF5E4, 0xF5E5, 0xF5E6, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF5E9, 0xF5EB, 0xF5ED, 0xF5F1, 0xF5F2, 0xF5F4, 0xF5F7, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF5FA, 0xF5FD, 0xF5FE, 0xF5FF, 0xF600, 0xF601, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF604, 0xF607, 0xF609, 0xF60D, 0xF60E, 0xF610, 0xF613, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF616, 0xF619, 0xF61A, 0xF61B, 0xF61C, 0xF61D, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF620, 0xF623, 0xF625, 0xF629, 0xF62A, 0xF62C, 0xF62F, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF632, 0xF635, 0xF636, 0xF637, 0xF638, 0xF639, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF63C, 0xF63F, 0xF641, 0xF645, 0xF647, 0xF64A, 0xF64C, 0xF64E, 0xF650, 
    0xF652, 0xF654, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF657, 0xF659, 0xF65A, 0xF65B, 0xF65C, 0xF65D, 0xF65F, 0xF660, 0xF661, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF664, 0xF667, 0xF669, 0xF66D, 0xF66F, 0xF671, 0xF674, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF677, 0xF679, 0xF67A, 0xF67B, 0xF67C, 0xF67D, 0xF67F, 0xF680, 0xF681, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF684, 0xF687, 0xF689, 0xF68D, 0xF68F, 0xF691, 0xF694, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF697, 0xF699, 0xF69A, 0xF69B, 0xF69C, 0xF69D, 0xF69F, 0xF6A0, 0xF6A1, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF6A4, 0xF6A7, 0xF6A9, 0xF6AD, 0xF6AF, 0xF6B1, 0xF6B3, 0xF6B5, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF6B8, 0xF6BA, 0xF6BB, 0xF6BC, 0xF6BD, 0xF6BE, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF6C1, 0xF6C3, 0xF6C5, 0xF6C9, 0xF6CA, 0xF6CC, 0xF6CE, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF6D1, 
    0xF6D3, 0xF6D4, 0xF6D5, 0xF6D6, 0xF6D7, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF6DA, 0xF6DC, 0xF6DE, 0xF6E2, 0xF6E3, 0xF6E5, 0xF6E7, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF6EA, 0xF6EC, 0xF6ED, 0xF6EE, 0xF6EF, 0xF6F0, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF6F3, 0xF6F5, 0xF6F7, 0xF6FB, 0xF6FD, 0xF700, 0xF702, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF705, 0xF708, 0xF709, 0xF70A, 0xF70B, 0xF70C, 0xF70E, 0xF70F, 0xF710, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF713, 0xF716, 0xF718, 0xF71C, 0xF71E, 0xF720, 0xF723, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF726, 0xF729, 0xF72A, 0xF72B, 0xF72C, 0xF72D, 0xF72F, 0xF730, 0xF731, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF734, 0xF737, 0xF739, 0xF73D, 0xF73F, 0xF741, 0xF744, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF747, 0xF74A, 0xF74B, 0xF74C, 0xF74D, 0xF74E, 0xF750, 0xF751, 0xF752, 0xFB10, 0xFB12, 0xFB14, 
    0xFB16, 0xFB18, 0xFB1A, 0xF755, 0xF758, 0xF75A, 0xF75E, 0xF760, 0xF762, 0xF764, 0xF767, 0xFAE9, 0xFAEB, 0xFAEC, 0xFAEE, 0xF76A, 0xF76D, 0xF76E, 0xF76F, 0xF770, 0xF771, 0xFAEF, 0xFAF1, 0xFAF3, 0xFAF5, 0xFAF7, 0xFAF9, 0xF774, 0xF777, 0xF779, 0xF77D, 0xF77E, 0xF780, 0xF783, 0xFAFA, 0xFAFB, 0xFAFC, 0xFAFE, 0xF786, 0xF789, 0xF78A, 0xF78B, 0xF78C, 0xF78D, 0xFAFF, 0xFB01, 0xFB03, 0xFB05, 0xFB07, 0xFB09, 0xF790, 0xF793, 0xF795, 0xF799, 0xF79A, 0xF79C, 0xF79F, 0xFB0A, 0xFB0C, 0xFB0D, 0xFB0F, 0xF7A2, 0xF7A5, 0xF7A6, 0xF7A7, 0xF7A8, 0xF7A9, 0xFB10, 0xFB12, 0xFB14, 0xFB16, 0xFB18, 0xFB1A, 0xF7AC, 0xF7AF, 0xF7B1, 0xF7B5, 0xC655, 0xC657, 0xC659, 0xC65B, 0xC66B, 0xC689, 0xC68B, 0xC68E, 0xC690, 0xC693, 0xC695, 0xC698, 0xC69A, 0xC69D, 0xC69F, 0xC6A2, 0xC66E];

    let mut count = 0;

    loop {

        
        let (opcode, byte2, byte3) = read_three_bytes(cpu.pc, &wram, cart);
        print!(
            "{:04X?}   {:02X?} {:02X?} {:02X?}    A:{:02X?} X:{:02X?} Y:{:02X?} P:{:02X?} SP:{:02X?} CYC:{}  $43:{:02X?} $44:{:02X?} ", 
            cpu.pc, 
            opcode, 
            byte2, 
            byte3,
            cpu.a,
            cpu.x,
            cpu.y,
            p_to_byte(&cpu),
            cpu.s,
            cpu.cycles,
            wram[0x43],
            wram[0x44],
        );

        if cpu.pc != pc_list[count as usize] {
            panic!("Error! {:04X?}, {:04X?}", cpu.pc, pc_list[count as usize]);
        }
        if cpu.pc == 0xC66E && count == 8990 {
            panic!("You did it!")
        }
        count += 1;
        exec_instr(opcode, byte2, byte3, &mut cpu, &mut wram, cart);
        // println!("{:04X?}:  {:02X?}, {:02X?}, {:02X?}", cpu.pc-0x8000, opcode, byte2, byte3);

        // do_ppu(&mut ppu, &mut vram, cart);

        // let mut buffer = String::new();
        // let mut stdin = io::stdin(); // We get `Stdin` here.
        // stdin.read_line(&mut buffer).expect("it broke");
    }
}

fn concat_u8(msb: u8, lsb: u8) -> u16 {
    ((msb as u16) << 8) + (lsb as u16)
}

fn is_neg(val: u8) -> bool {
    val > 0x7F
}

fn get_bit(byte: u8, idx: u8) -> bool {
    (byte & (0x01 << idx)) != 0
}

fn was_overflow(original: u8, operand: u8, result: u8) -> bool {
    ((!(original ^ operand) & (original ^ result)) >> 7) == 1
}

fn p_to_byte(cpu: &hw::Cpu) -> u8 {
    (if cpu.p_n {0b1000_0000} else {0}) | 
    (if cpu.p_v {0b0100_0000} else {0}) | 
                 0b0010_0000            |
    (if cpu.p_d {0b0000_1000} else {0}) | 
    (if cpu.p_i {0b0000_0100} else {0}) | 
    (if cpu.p_z {0b0000_0010} else {0}) | 
    (if cpu.p_c {0b0000_0001} else {0})
}

fn read_three_bytes(addr: u16, wram: &[u8], cart: &hw::Cartridge) -> (u8, u8, u8) {
    (
        read_mem(addr, wram, cart),
        read_mem(addr.saturating_add(1), wram, cart),
        read_mem(addr.saturating_add(2), wram, cart)
    )
}

fn read_mem(addr: u16, wram: &[u8], cart: &hw::Cartridge) -> u8 {
    match addr {
        0x0000..=0x1FFF => wram[(addr % 0x800) as usize],
        0x2000..=0x3FFF => 0,
        0x4000..=0x401F => 0,
        0x4020..=0x5FFF => 0,
        0x6000..=0x7FFF => 0,
        0x8000..=0xBFFF => {
            let prg_addr = addr - 0x8000;
            // println!("PRG addr: {:04X?}", prg_addr);
            cart.prg_rom[prg_addr as usize]
        },
        0xC000..=0xFFFF => {
            let prg_addr = addr - 0xC000;
            // println!("PRG addr: {:04X?}", prg_addr);
            cart.prg_rom[prg_addr as usize]
        }
    }
}

fn write_mem(addr: u16, val: u8, wram: &mut [u8]) {
    if addr < 0x2000 {
        wram[(addr % 0x800) as usize] = val;
    }
}

// Stack grows from 0x01FF down to 0x0100
// Stack pointer is offset from 0x0100
// Pushing decrements pointer
// Pulling increments pointer
fn stack_push(val: u8, cpu: &mut hw::Cpu, wram: &mut [u8]) {
    wram[0x0100 + (cpu.s as usize)] = val;
    cpu.s = cpu.s.wrapping_sub(1);
}
fn stack_pop(cpu: &mut hw::Cpu, wram: &[u8]) -> u8 {
    cpu.s = cpu.s.wrapping_add(1);
    wram[0x0100 + (cpu.s as usize)]
}


// fn do_ppu(ppu: &mut hw::Ppu, vram: &[u8], cart: &hw::Cartridge) {
//     // Pre-render scanline
//     ppu.cycles += 341 - (ppu.odd_frame as u64);
    
//     for pixel in 0..256 {
        
//     }


// }

fn exec_instr(opcode: u8, byte2: u8, byte3: u8, cpu: &mut hw::Cpu, wram: &mut [u8], cart: &hw::Cartridge) {

    // Tells us the addressing mode and number of cycles
    let instr_info = opc::INSTRUCTION_INFO[opcode as usize];

    // println!("Mode - {:?}", instr_info.mode);
    // println!("N={},V={},I={},Z={},C={}", cpu.p_n, cpu.p_v, cpu.p_i, cpu.p_z, cpu.p_c);
    let instr_addr = match instr_info.mode {
        opc::Mode::Absolute  => concat_u8(byte3, byte2),
        opc::Mode::AbsoluteX => concat_u8(byte3, byte2).wrapping_add(cpu.x as u16),
        opc::Mode::AbsoluteY => concat_u8(byte3, byte2).wrapping_add(cpu.y as u16),
        opc::Mode::ZeroPage  => byte2 as u16,
        opc::Mode::ZeroPageX => byte2.wrapping_add(cpu.x) as u16,
        opc::Mode::ZeroPageY => byte2.wrapping_add(cpu.y) as u16,
        opc::Mode::Relative  => cpu.pc.wrapping_add_signed((byte2 as i8) as i16) + 2u16,  // pc+offset+2 (instr len)
        opc::Mode::IndirectX => {
            let zp_addr_lsb = byte2.wrapping_add(cpu.x);
            let zp_addr_msb = zp_addr_lsb.wrapping_add(1);
            concat_u8(wram[zp_addr_msb as usize], wram[zp_addr_lsb as usize])
        },
        opc::Mode::IndirectY => {
            let zp_lsb = wram[byte2 as usize];
            let zp_msb = wram[byte2.wrapping_add(1) as usize];
            // println!("zp_lsb: {}, zp_msb: {}, concat+y: {}", zp_lsb, zp_msb, concat_u8(zp_msb, zp_lsb).wrapping_add(cpu.y as u16));
            concat_u8(zp_msb, zp_lsb).wrapping_add(cpu.y as u16)
        },
        opc::Mode::AbsoluteI => {
            let lsb = read_mem(concat_u8(byte3, byte2), wram, cart);
            let msb = read_mem(concat_u8(byte3, byte2.wrapping_add(1)), wram, cart);
            concat_u8(msb, lsb)
        },
        _ => 0,
    };

    let instr_val = match instr_info.mode {
        opc::Mode::Immediate | opc::Mode::Accumulator => byte2,
        _ => read_mem(instr_addr, wram, cart),
    };

    /* 

    Instructions with additional page penalties

    All branch instructions have a 1c penalty when taken, 1c penalty if page crossed
    LAS y-abs
    LAX y-abs, y-indi
    LDA x-abs, y-abs, y-indi
    LDX 


    */

    let branch_cycle_penalty: u64 = if instr_info.mode == opc::Mode::Relative {
        if (cpu.pc >> 8) == (instr_addr >> 8) {
            1
        } else {
            2
        }
    } else {
        0
    };

    let instr_len = match instr_info.mode {
        opc::Mode::Immediate => 2,
        opc::Mode::Accumulator => 1,
        opc::Mode::Implied => 1,
        opc::Mode::Absolute  => 3,
        opc::Mode::AbsoluteX => 3,
        opc::Mode::AbsoluteY => 3,
        opc::Mode::ZeroPage  => 2,
        opc::Mode::ZeroPageX => 2,
        opc::Mode::ZeroPageY => 2,
        opc::Mode::Relative  => 2,
        opc::Mode::IndirectX => 2,
        opc::Mode::IndirectY => 2,
        opc::Mode::AbsoluteI => 3,
    };

    println!("instr_val = {:02X?}, instr_addr = {:02X?}", instr_val, instr_addr);

    cpu.cycles += instr_info.cycles as u64;

    let prev_pc = cpu.pc;

    match opcode {
        // LDA
        0xAD | 0xBD | 0xA9 | 0xB9 | 0xA1 | 0xB1 | 0xA5 | 0xB5 => {
            cpu.a = instr_val;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // LDX
        0xAE | 0xBE | 0xA2 | 0xA6 | 0xB6 => {
            cpu.x = instr_val;
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        },
        // LDY
        0xAC | 0xBC | 0xA0 | 0xA4 | 0xB4 => {
            cpu.y = instr_val;
            cpu.p_n = is_neg(cpu.y);
            cpu.p_z = cpu.y == 0;
        },
        // STA
        0x8D | 0x9D | 0x99 | 0x81 | 0x91 | 0x85 | 0x95 => {
            write_mem(instr_addr, cpu.a, wram);
        },        
        // STX
        0x8E | 0x86 | 0x96 => {
            write_mem(instr_addr, cpu.x, wram);
        },        
        // STY
        0x8C | 0x84 | 0x94 => {
            write_mem(instr_addr, cpu.y, wram);
        },
        // TAX
        0xAA => {
            cpu.x = cpu.a;
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        },
        // TAY
        0xA8 => {
            cpu.y = cpu.a;
            cpu.p_n = is_neg(cpu.y);
            cpu.p_z = cpu.y == 0;
        },
        // TSX
        0xBA => {
            cpu.x = cpu.s;
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        },
        // TXA
        0x8A => {
            cpu.a = cpu.x;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // TXS
        0x9A => {
            cpu.s = cpu.x;
        },
        // TYA
        0x98 => {
            cpu.a = cpu.y;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // PHA
        0x48 => {
            stack_push(cpu.a, cpu, wram);
        },
        // PHP
        0x08 => {
            stack_push(p_to_byte(&cpu) | 0b0001_0000, cpu, wram);
        },
        // PLA
        0x68 => {
            cpu.a = stack_pop(cpu, wram);
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // PLP
        0x28 => {
            let p_reg = stack_pop(cpu, wram);
            cpu.p_n = get_bit(p_reg, 7);
            cpu.p_v = get_bit(p_reg, 6);
            cpu.p_d = get_bit(p_reg, 3);
            cpu.p_i = get_bit(p_reg, 2);
            cpu.p_z = get_bit(p_reg, 1);
            cpu.p_c = get_bit(p_reg, 0);
        },
        // ASL (ACC)
        0x0A => {
            cpu.p_c = cpu.a > 127;
            cpu.a <<= 1;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // ASL (RMW)
        0x0E | 0x1E | 0x06 | 0x16 => {
            cpu.p_c = wram[instr_addr as usize] > 127;
            wram[instr_addr as usize] <<= 1;
            cpu.p_n = is_neg(wram[instr_addr as usize]);
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // LSR (ACC)
        0x4A => {
            cpu.p_c = (cpu.a & 0x01) == 1;
            cpu.a >>= 1;
            cpu.p_n = false;
            cpu.p_z = cpu.a == 0;
        },
        // LSR (RMW)
        0x4E | 0x5E | 0x46 | 0x56 => {
            cpu.p_c = (wram[instr_addr as usize] & 0x01) == 1;
            wram[instr_addr as usize] >>= 1;
            cpu.p_n = false;
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // ROL (ACC)
        0x2A => {
            let initial_carry = cpu.p_c;
            cpu.p_c = cpu.a > 127;
            cpu.a <<= 1;
            cpu.a |= initial_carry as u8;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // ROL (RMW)
        0x2E | 0x3E | 0x26 | 0x36 => {
            let initial_carry = cpu.p_c;
            cpu.p_c = wram[instr_addr as usize] > 127;
            wram[instr_addr as usize] <<= 1;
            wram[instr_addr as usize] |= initial_carry as u8;
            cpu.p_n = is_neg(wram[instr_addr as usize]);
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // ROR (ACC)
        0x6A => {
            let initial_carry = cpu.p_c;
            cpu.p_c = (cpu.a & 0x01) == 1;
            cpu.a >>= 1;
            cpu.a |= (initial_carry as u8) << 7;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // ROR (RMW)
        0x6E | 0x7E | 0x66 | 0x76 => {
            let initial_carry = cpu.p_c;
            cpu.p_c = (wram[instr_addr as usize] & 0x01) == 1;
            wram[instr_addr as usize] >>= 1;
            wram[instr_addr as usize] |= (initial_carry as u8) << 7;
            cpu.p_n = is_neg(wram[instr_addr as usize]);
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // AND
        0x2D | 0x3D | 0x39 | 0x29 | 0x21 | 0x31 | 0x25 | 0x35 =>  {
            cpu.a &= instr_val;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // BIT
        0x2C | 0x24 => {
            cpu.p_n = get_bit(instr_val, 7);
            cpu.p_v = get_bit(instr_val, 6);
            cpu.p_z = (cpu.a & instr_val) == 0;
        },
        // EOR
        0x4D | 0x5D | 0x59 | 0x49 | 0x41 | 0x51 | 0x45 | 0x55 => { 
            cpu.a ^= instr_val;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // ORA
        0x0D | 0x1D | 0x19 | 0x09 | 0x01 | 0x11 | 0x05 | 0x15 => {
            cpu.a |= instr_val;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        },
        // ADC
        0x6D | 0x7D | 0x79 | 0x69 | 0x61 | 0x71 | 0x65 | 0x75 => {
            let (result, carry) = cpu.a.carrying_add(instr_val, cpu.p_c);
            println!("carry = {}, {} + {} = {}", cpu.p_c, cpu.a, instr_val, result);
            
            cpu.p_v = was_overflow(cpu.a, instr_val, result);
            cpu.a = result;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
            cpu.p_c = carry;
        },
        // CMP
        0xCD | 0xDD | 0xD9 | 0xC9 | 0xC1 | 0xD1 | 0xC5 | 0xD5 => {
            cpu.p_z = cpu.a == instr_val;
            cpu.p_n = is_neg(cpu.a.wrapping_sub(instr_val));
            cpu.p_c = instr_val <= cpu.a;
            // println!("{} - {} = {}", cpu.a, instr_val, result);
        },
        // CPX
        0xEC | 0xE0 | 0xE4 => {
            cpu.p_z = cpu.x == instr_val;
            cpu.p_n = is_neg(cpu.x.wrapping_sub(instr_val));
            cpu.p_c = instr_val <= cpu.x;
        },
        // CPY
        0xCC | 0xC0 | 0xC4 => {
            cpu.p_z = cpu.y == instr_val;
            cpu.p_n = is_neg(cpu.y.wrapping_sub(instr_val));
            cpu.p_c = instr_val <= cpu.y;
        },
        // SBC
        0xED | 0xFD | 0xF9 | 0xE9 | 0xE1 | 0xF1 | 0xE5 | 0xF5 | 0xEB => {
            let (result, borrow) = cpu.a.borrowing_sub(instr_val, !cpu.p_c);
            println!("{} - {} = {}", cpu.a, instr_val, result);

            cpu.p_v = was_overflow(cpu.a, (-(instr_val as i8) as u8), result);
            cpu.a = result;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
            cpu.p_c = !borrow;
        },
        // DEC
        0xCE | 0xDE | 0xC6 | 0xD6 => {
            wram[instr_addr as usize] = wram[instr_addr as usize].wrapping_sub(1);
            cpu.p_n = is_neg(wram[instr_addr as usize]);
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // DEX
        0xCA => {
            cpu.x = cpu.x.wrapping_sub(1);
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        },
        // DEY
        0x88 => {
            cpu.y = cpu.y.wrapping_sub(1);
            cpu.p_n = is_neg(cpu.y);
            cpu.p_z = cpu.y == 0;
        },
        // INC
        0xEE | 0xFE | 0xE6 | 0xF6 => {
            wram[instr_addr as usize] = wram[instr_addr as usize].wrapping_add(1);
            cpu.p_n = is_neg(wram[instr_addr as usize]);
            cpu.p_z = wram[instr_addr as usize] == 0;
        },
        // INX
        0xE8 => {
            cpu.x = cpu.x.wrapping_add(1);
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        },
        // INY
        0xC8 => {
            cpu.y = cpu.y.wrapping_add(1);
            cpu.p_n = is_neg(cpu.y);
            cpu.p_z = cpu.y == 0;
        },
        // BRK
        0x00 => {
            stack_push((cpu.pc >> 8) as u8, cpu, wram);
            stack_push((cpu.pc & 0x00FF) as u8, cpu, wram);
            stack_push(p_to_byte(&cpu) | 0b0001_0000, cpu, wram);
            cpu.pc = concat_u8(read_mem(0xFFFF, wram, cart), read_mem(0xFFFE, wram, cart));
        },
        // JMP 
        0x4C | 0x6C => {
            cpu.pc = instr_addr;
        },
        // JSR
        0x20 => {
            let pc_add2 = cpu.pc.wrapping_add(2);
            stack_push((pc_add2 >> 8) as u8, cpu, wram);
            stack_push((pc_add2 & 0x00FF) as u8, cpu, wram);
            cpu.pc = instr_addr;
        },
        // RTI
        0x40 => {
            let p_reg = stack_pop(cpu, wram);
            cpu.p_n = get_bit(p_reg, 7);
            cpu.p_v = get_bit(p_reg, 6);
            cpu.p_i = get_bit(p_reg, 2);
            cpu.p_z = get_bit(p_reg, 1);
            cpu.p_c = get_bit(p_reg, 0);
            let lsb = stack_pop(cpu, wram);
            let msb = stack_pop(cpu, wram);
            cpu.pc = concat_u8(msb, lsb);
        },
        // RTS 
        0x60 => {
            let lsb = stack_pop(cpu, wram);
            let msb = stack_pop(cpu, wram);
            cpu.pc = concat_u8(msb, lsb) + 1;
        },
        // BCC
        0x90 => {
            if !cpu.p_c {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BCS
        0xB0 => {
            if cpu.p_c {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BEQ
        0xF0 => {
            if cpu.p_z {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BMI
        0x30 => {
            if cpu.p_n {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BNE
        0xD0 => {
            if !cpu.p_z {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BPL
        0x10 => {
            if !cpu.p_n {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BVC
        0x50 => {
            if !cpu.p_v {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        },
        // BVS
        0x70 => {
            if cpu.p_v {
                cpu.pc = instr_addr;
                cpu.cycles += branch_cycle_penalty;
            }
        }
        // CLC 
        0x18 => {
            cpu.p_c = false;
        }
        // CLD
        0xD8 => {
            cpu.p_d = false;
        }
        // CLI 
        0x58 => {
            cpu.p_i = false;
        }
        // CLV 
        0xB8 => {
            cpu.p_v = false;
        }
        // SEC
        0x38 => {
            cpu.p_c = true;
        }
        // SED
        0xF8 => {
            cpu.p_d = true;
        }
        // SEI
        0x78 => {
            cpu.p_i = true;
        }
        // NOP
        0xEA | 0x1A | 0x3A | 0x5A | 0x7A | 0xDA | 0xFA | 0x80 | 0x82 | 0x89 | 0xC2 | 0xE2 | 0x0C |
        0x1C | 0x3C | 0x5C | 0x7C | 0xDC | 0xFC | 0x04 | 0x44 | 0x64 | 0x14 | 0x34 | 0x54 | 0x74 |
        0xD4 | 0xF4 => {}
        // ALR
        0x4B => {
            cpu.a &= instr_val;
            cpu.a >>= 1;
        }
        // LAX
        0xAB | 0xAF | 0xBF | 0xA7 | 0xB7 | 0xA3 | 0xB3 => {
            cpu.a = instr_val;
            cpu.x = instr_val;
            cpu.p_n = is_neg(cpu.x);
            cpu.p_z = cpu.x == 0;
        }
        // SAX
        0x83 | 0x87 | 0x8F | 0x97 => {
            write_mem(instr_addr, cpu.a & cpu.x, wram); 
        }
        // DCP
        0xC3 | 0xC7 | 0xCF | 0xD3 | 0xD7 | 0xDB | 0xDF => {
            wram[instr_addr as usize] = wram[instr_addr as usize].wrapping_sub(1);
            cpu.p_z = cpu.a == wram[instr_addr as usize];
            cpu.p_n = is_neg(cpu.a.wrapping_sub(wram[instr_addr as usize]));
            cpu.p_c = wram[instr_addr as usize] <= cpu.a;
        }
        // ISC
        0xE3 | 0xE7 | 0xEF | 0xF3 | 0xF7 | 0xFB | 0xFF => {
            wram[instr_addr as usize] = wram[instr_addr as usize].wrapping_add(1);            
            let (result, borrow) = cpu.a.borrowing_sub(wram[instr_addr as usize], !cpu.p_c);

            cpu.p_v = was_overflow(cpu.a, (-(wram[instr_addr as usize] as i8) as u8), result);
            cpu.a = result;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
            cpu.p_c = !borrow;
        }
        // SLO
        0x03 | 0x07 | 0x0F | 0x13 | 0x17 | 0x1B | 0x1F => {
            cpu.p_c = wram[instr_addr as usize] > 127;
            wram[instr_addr as usize] <<= 1;
            cpu.a |= wram[instr_addr as usize];
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        }
        // RLA
        0x23 | 0x27 | 0x2F | 0x33 | 0x37 | 0x3B | 0x3F => {
            let initial_carry = cpu.p_c;
            cpu.p_c = wram[instr_addr as usize] > 127;
            wram[instr_addr as usize] <<= 1;
            wram[instr_addr as usize] |= initial_carry as u8;

            cpu.a &=wram[instr_addr as usize];
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        }
        // SRE
        0x43 | 0x47 | 0x4F | 0x53 | 0x57 | 0x5B | 0x5F => {
            cpu.p_c = (wram[instr_addr as usize] & 0x01) == 1;
            wram[instr_addr as usize] >>= 1;

            cpu.a ^= wram[instr_addr as usize];
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
        }
        // RRA 
        0x63 | 0x67 | 0x6F | 0x73 | 0x77 | 0x7B | 0x7F => {
            let initial_carry = cpu.p_c;
            cpu.p_c = (wram[instr_addr as usize] & 0x01) == 1;
            wram[instr_addr as usize] >>= 1;
            wram[instr_addr as usize] |= (initial_carry as u8) << 7;

            let (result, carry) = cpu.a.carrying_add(wram[instr_addr as usize], cpu.p_c);
            
            cpu.p_v = was_overflow(cpu.a, wram[instr_addr as usize], result);
            cpu.a = result;
            cpu.p_n = is_neg(cpu.a);
            cpu.p_z = cpu.a == 0;
            cpu.p_c = carry;

        }
        _ => println!("Illegal opcodes are not implemented")
           
    }

    // If the instruction wasn't a JMP or something that changes the PC,
    // move the PC to the next instruction.
    if prev_pc == cpu.pc {
        cpu.pc = cpu.pc.wrapping_add(instr_len);
    }
    

}
