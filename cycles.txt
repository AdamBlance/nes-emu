Notes for understanding cycles

So clearly I need some better logic for handling the cycles of each instruction based on some stuff

I think the way to do it might be to store whether an instruction is RMW? 
Then can use the addressing mode + RMW status to quickly compute what cycles to do work on


For accumulator instructions:
    read opc
    read byte1
    CALL

For immediate instructions:
    read opc
    read byte1
    CALL

Both of these only affect registers



For absolute instructions:
    JMP:
        read opc
        read byte1
        read byte2
        CALL

    reads/writes:
        read opc
        read byte1
        read byte2
        CALL (which will read/write)
    
    read-modify-write:
        read opc
        read byte1
        read byte2
        read memory
        write dummy
        CALL (write memory)


For zero page instructions:
    reads/writes:
        read opc
        read byte1
        read mem 
        CALL
    read-modify-write:
        read opc
        read byte 
        read mem
        write dummy
        CALL (write memory)



I think the first thing to do should be to characterise the cycles common to each addressing mode


Accumulator         2
Immediate           2
Absolute            4 (JMP=3)
ZeroPage            3 (at least one read or write after opc+byte1)
ZeroPageX/Y         4
AbsoluteX/Y         


Something obvious is that the number of bytes for each addressing mode determines the first cycles
that's a good place to start

so if cycle 1, get opcode 
if cycle 2, get byte 1

if cycles > 2, get byte 2

good start 


absolute is 3 cycles, +1 if rw and +3 if rmw (read, write, write)

zero page is 2 cycles, +1 for rw and +3 if rmw (read, write, write)

zero page x/y is 2 cycles, +2 for rw and +4 if rmw

